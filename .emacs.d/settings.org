#+EXPORT-FILENAME init.el
* Start up
** Add Edit original warning.
 #+BEGIN_SRC emacs-lisp
 ;;;; This file had been generated from settings.org
 #+END_SRC
** A measure the load time
 #+BEGIN_SRC emacs-lisp
 ;; load time metrics
 (setq  *emacs-load-start* (current-time))
 #+END_SRC
** Package loading mechanism needs review                            :review:
 #+BEGIN_SRC emacs-lisp
 (require 'package)
 (add-to-list 'package-archives
              '("melpa" . "https://melpa.org/packages/")
	      t)
 (add-to-list 'package-archives
	      '("elpa" . "https://elpa.gnu.org/packages/")
	      t)

 (when (< emacs-major-version 24)
   ;; For important compatibility libraries like cl-lib
   (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")))

 (package-initialize)


 ;;;; These are the packages needed

 (defvar local-packages '(flx-ido
			  auto-complete
			  epc
			  slime
			  rainbow-delimiters
			  paredit
			  ac-slime
			  cyberpunk-theme
			  dracula-theme
			  dakrone-theme
			  popup
			  jedi
			  docker-tramp
			  dockerfile-mode
			  pillar
			  cmake-mode
			  yaml-mode
			  ess
			  deft
			  magit
			  htmlize))


 ;;;; Find any unistalled package

 (defun uninstalled-packages (packages)
   (delq nil
	 (mapcar (lambda (p)
		   (if (package-installed-p p nil) nil p))
		 packages)))

 ;;;; Install any uninsalled packages

 (let ((need-to-install
	(uninstalled-packages local-packages)))
   (message "Checking for unistalled  packages: %s." need-to-install)
   (when need-to-install
     (progn
       (package-refresh-contents)
       (dolist (p need-to-install)
         (message "Downloading %s." p)
	 (package-install p)))))
	 
(setq *emacs-download* (current-time))

 #+END_SRC
** Basic Look and feel
I don't like the a messy startup screen.

 #+BEGIN_SRC emacs-lisp
 (setq inhibit-startup-screen t)
 (setq visible-bell 1)
 #+END_SRC
** Crossplatform filename
 I like to specify filenames so conversion to the running platform is easy
 #+BEGIN_SRC emacs-lisp
 (fset 'convert-windows-filename
       (if (fboundp 'cygwin-convert-file-name-from-windows)
	   'cygwin-convert-file-name-from-windows
	   'convert-standard-filename))
 #+END_SRC

* Save the emacs customization to a file.
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs-custom.el")
(load custom-file)
#+END_SRC
* MSYS2/MINGW64 Path elements
#+BEGIN_SRC emacs-lisp
(let ((mingw64-root-mount "C:/devel/msys64")
      (mingw64-bin-mount "C:/devel/msys64/usr/bin"))
  
(add-to-list 'exec-path (concat mingw64-root-mount "/mingw64/bin"))
(add-to-list 'exec-path (concat mingw64-root-mount "/usr/local/bin"))
(add-to-list 'exec-path (concat mingw64-root-mount "/usr/bin"))
(add-to-list 'exec-path mingw64-bin-mount))
#+END_SRC
* Rebuild PATH based on current exec-path
#+BEGIN_SRC emacs-lisp
;;;  Now rebuild path based on exec-path
(setenv "PATH" (mapconcat #'identity exec-path path-separator))
#+END_SRC
* Common Lisp, SLIME and AUTO-COMPLETE                               :review:
#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(ac-config-default)

;;;; Slime Setup

(setq SBCL_HOME_SAVE (getenv "SBCL_HOME"))

(setq PATH_SAVE (getenv "PATH"))

(setq +msys64-base-path+ "C:/devel/msys64/")


(defun lisp-mingw64-implementation (tag)
  `(,tag (,(concat +msys64-base-path+ "usr/bin/env.exe") "MSYSTEM=MINGW64"
	  ,(concat +msys64-base-path+ "usr/bin/bash.exe") "-l" "-c" "/usr/local/bin/sbcl --noinform")))

(setq SBCL_BASE "C:/devel/SBCL_2_0_0-bin")

(setq slime-lisp-implementations
      `(

	,(when (file-exists-p (concat +msys64-base-path+ "/usr/local/bin/sbcl.exe"))
	   (lisp-mingw64-implementation 'mingw64-sbcl))	
	,(when (boundp 'SBCL_BASE) 
	   (cond  
		 ((string= SBCL_BASE "C:/devel/SBCL_2_0_2")
		  (progn
		    (unless (boundp 'SBCL-IN-PATH)
		      (setenv "PATH"
			      (concat
			       SBCL_BASE
			       "/bin/"
			       ";"
			       (getenv "PATH")))
		      (setenv "SBCL_HOME"
			      (concat
			       SBCL_BASE
			       "/lib/sbcl"))
		      (setq SBCL-IN-PATH t))
		    `(sbcl  (,(concat SBCL_BASE "/bin/" "sbcl.exe")
			     "--noinform"))))
		 ((string= SBCL_BASE "C:/devel/SBCL_2_0_0-bin")
		  (progn
		    (unless (boundp 'SBCL-IN-PATH)
		      (setenv "PATH"
			      (concat
			       SBCL_BASE
			       "/bin/"
			       ";"
			       (getenv "PATH")))
		       (setenv "SBCL_HOME" SBCL_BASE)
		       (setq SBCL-IN-PATH t))
		    `(sbcl  (,(concat SBCL_BASE "/" "sbcl.exe")
			     "--noinform"))))))
      (clisp ("clisp" "-K" "full" "-I"))
      ,(when (and (eq system-type 'winodows-nt))
	 `(clisp ("clisp" "-K" "full" "-I")))
      ,(when (and (eq system-type 'cygwin) (file-exists-p (convert-standard-filename "/usr/bin/clisp"))) ;; Add clisp on cygwin
	   `(clisp (,(convert-standard-filename "/usr/bin/clisp" ))))
      ,(when (file-exists-p  (convert-standard-filename "C:/Program Files/ABCL/abcl.jar")) 	;; Add ABCL if present
	   `(abcl  ("java" "-jar" ,(convert-standard-filename "C:/Program Files/ABCL/abcl.jar"))))))

;;;; Allow Root of HyperSped to be set from (env "HyperSpec")

(setq common-lisp-hyperspec-root (convert-standard-filename (getenv "HyperSpec")))

(setq slime-contribs '(slime-fancy))

(global-set-key "\C-cs" 'slime-selector)

;;;; Slime Autocomplete

(require 'ac-slime)
(add-hook 'slime-mode-hook 'set-up-slime-ac)
(add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'slime-repl-mode))

;;;; Paredit Mode

(add-hook 'lisp-mode-hook #'paredit-mode)

;;;; Auto-complete for lisp

(add-hook 'lisp-mode-hook #'auto-complete-mode)

;;;; Auto-modes for .cl and .asd

(setq auto-mode-alist
      (append '((".*\\.asd\\'" . lisp-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.cl\\'" . lisp-mode))
	      auto-mode-alist))
#+END_SRC
* Emacs Theme                                                        :review:
#+BEGIN_SRC emacs-lisp
(load-theme 'manoj-dark)
(set-face-attribute 'default nil :height 120)
#+END_SRC

* Rainbow Delimeters
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC
* Pascal Setup                                                       :review:
#+BEGIN_SRC emacs-lisp
(add-hook 'pascal-mode-hook
	  (lambda ()
	    (set (make-local-variable 'compile-command)
		 (concat "fpc " (file-name-nondirectory (buffer-file-name)))
		 )
	    )
	  t)

(setq auto-mode-alist
      (append '((".*\\.pas\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.pp\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.yml\\'" . yaml-mode))
	      auto-mode-alist))
#+END_SRC
* Shells                                                             :review:
#+BEGIN_SRC emacs-lisp
;; (setenv  "PATH" (concat
;; 		 "C:\\devel\\msys64\\usr\\bin" ";"
;; 		 (getenv "PATH")))

(setq win-shell-implementaions
      `((cmd (shell))
	(ming64 (
		      (defun my-shell-setup ()
       "For Cygwin bash under Emacs 20"
       (setq comint-scroll-show-maximum-output 'this)
       (make-variable-buffer-local 'comint-completion-addsuffix))
       (setq comint-completion-addsuffix t)
       ;; (setq comint-process-echoes t) ;; reported that this is no longer needed
       (setq comint-eol-on-send t)
       (setq w32-quote-process-args ?\")
     
     (add-hook 'shell-mode-hook 'my-shell-setup)
		 ))))
	
(defun win-shell ())
  
;; The MSYS-SHELL

(defun msys-shell () 
  (interactive)
  (let ((explicit-shell-file-name (convert-standard-filename "c:/devel/msys64/usr/bin/bash.exe"))
	(shell-file-name "bash")
	(explicit-bash.exe-args '("--noediting" "--login" "-i"))) 
    (setenv "SHELL" shell-file-name)
    (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
    (shell)))

;; The MINGW64-SHELL

(defun mingw64-shell () 
       (interactive)
       (let (( explicit-shell-file-name (convert-standard-filename  "c:/devel/msys64/mingw64/bin/bash.exe")))
	 (shell "*bash*")
	     (call-interactively 'shell))
       ;; (setq shell-file-name "bash")
       ;; (setq explicit-bash.exe-args '("--login" "-i")) 
       ;; (setenv "SHELL" shell-file-name)
       ;; (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
       ;; (shell)
       )
#+END_SRC
* Tramp                                                              :review:
#+BEGIN_SRC emacs-lisp
(require 'tramp)
;(setq tramp-default-method "plink")
(setq tramp-verbose 10)
#+END_SRC
* IDO                                                                :review:
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
#+END_SRC
* Indent                                                             :review:
  - Leftover from  parsing experiment???
#+BEGIN_SRC emacs-lisp
(put 'if 'lisp-indent-function nil)
(put 'when 'lisp-indent-function 1)
(put 'unless 'lisp-indent-function 1)
(put 'do 'lisp-indent-function 2)
(put 'do* 'lisp-indent-function 2)
#+END_SRC
* Magit                                                              :review:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
* Printing                                                           :review:
#+BEGIN_SRC emacs-lisp
(setq printer-name "lpr://192.168.1.39")
#+END_SRC

* Ord Mode Customizations
** Org Key Binding
 #+BEGIN_SRC emacs-lisp
 ;;;; Org Mode key bindings.
 (global-set-key (kbd "C-c l") 'org-store-link)
 (global-set-key (kbd "C-c a") 'org-agenda)
 (global-set-key (kbd "C-c c") 'org-capture)
 (global-set-key (kbd "C-c b") 'org-switchb)
 #+END_SRC
** Configure BABEL languages
 #+BEGIN_SRC emacs-lisp
 (org-babel-do-load-languages
  'org-babel-load-languages
  '((lisp . t)
    (emacs-lisp . t)))
 #+END_SRC
** org modules needed
 #+BEGIN_SRC emacs-lisp
 (setq org-modules '(org-habit org-checklist))
 #+END_SRC
** Configure habit (do not remember why)
 #+BEGIN_SRC emacs-lisp
 (setq org-habit-graph-column 50)
 #+END_SRC
** Org link abbreviations
 #+BEGIN_SRC emacs-lisp
 (setq org-link-abbrev-alist
       '(("bugzilla" . "http://192.168.1.50/bugzilla/show_bug.cgi?id=")
	 ("bugzilla-comp" . "http://192.168.1.50/bugzilla/describecomponents.cgi?product=")))
 #+END_SRC
** Ensure there are stadard ~/org directories
 #+BEGIN_SRC emacs-lisp
 ;; Each user has a org directory in ~/org ensure it exists
 (unless (file-directory-p "~/org")
   (make-directory  "~/org"))
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
 (setq org-default-notes-file "~/org/notes.org")


 ;(require 'org-checklist)

 ;;;; Add MikTex executables to path
 ;(add-to-list 'exec-path "/c/Users/zzzap/AppData/Local/Programs/MiKTeX/miktex/bin/x64")
 #+END_SRC
** A few custom checklists
 #+BEGIN_SRC emacs-lisp
 (defun morning-checklist-writer()
   (format "* Morning Checklist
   - [ ] Morning Tray for Mom [/]
     - [ ] Morning Medications
     - [ ] Breakfast
       - [ ] Cereal 4oz milk
     - [ ] 4oz water 1/2 TSP metamucil
     - [ ] Spoon
   - [ ] Feed Cat
   - [ ] Eat YOUR Breakfast
 " nil))

 (defun monthly-tasks-for-james-seese ()
   (format "* Monthly Tasks: James Seese
   - [ ] Process all inbound mail.
   - [ ] Separate mail by entity
   - [ ] list all oustanding bills
   - [ ] list all oustanding deposits
   - [ ] Make deposit list
     - [ ] vendor
     - [ ] amount
   - [ ] Make check list
     - [ ] Vendor
     - [ ] Amount
   - [ ] Write and mail checks" nil))
 #+END_SRC
** Standard org and org-agenda directories
  - I have a common place for org and org agenda files
 #+BEGIN_SRC emacs-lisp
 ;; My org files
 (setq user/org-files "~/org/")
 (setq user/org-agenda-files "~/org/agenda/")
 #+END_SRC
** Task agenda context
 - This starts an adenda context
 #+BEGIN_SRC emacs-lisp
 (setq org-agenda-files  `(,user/org-agenda-files))
 (setq org-agenda-skip-scheduled-if-done t)
 #+END_SRC
  - The following may be defined with the above values
** Agenda configuration
#+BEGIN-SRC emacs-lisp
 (setq org-agenda-files `(,user/org-agenda-files))
#+END_SRC
** Capture Templates
 #+BEGIN_SRC emacs-lisp
 ;;; See: http://cachestocaches.com/2016/9/my-workflow-org-agenda/
 (setq org-capture-templates
       `(("t" "todo" entry (file ,(concat user/org-agenda-files "gtd.org"))
	  "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
	 ("n" "note" entry (file ,(concat user/org-agenda-files  "gtd.org"))
	  "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
 ;; Medical Appointments
 ;; Medical Appointment  (m) Medical template
    ("m" "MEDICAL   (m) Medical" entry (file ,(concat user/org-agenda-files "gtd.org"))
     "* Medical %^{Who} %?
   CLOSED: %^U
   :PROPERTIES:
   :Attend:   Tom Rake
   :Location:
   :Via:
   :Note:
   :END:
   :LOGBOOK:
   - State \"MEETING\"    from \"\"           %U
   :END:
   %^T--%^T" :empty-lines 1)
 ;; Historic Meeting Template
 ;; ("m" "Meeting" entry (file  ,(concat user/org-agenda-files "gtd.org"))
 ;;  "* MEETING with %^{Meeting with:} %?" :clock-in t :clock-resume t)

 ;; Shoppping Items
    ("s" "Shopping List - Needed (s)" entry (file ,(concat user/org-agenda-files "gtd.org"))
     "* Shopping Item %^{Needed Item} %?
   CLOSED: %U
   :PROPERTIES:
   :URGENCY: %^{Urgency?|Regular Trip|ASAP|Next Day}
   :END:
 ")
	 ("i" "Idea" entry (file ,(concat user/org-agenda-files "gtd.org"))
	  "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
	 ("j" "Journal" entry (file+datetree ,(concat user/org-files "diary.org"))
	  "* %U %^{Title}\n  -%?" :clock-in t :clock-resume t)
	 ("n" "Next Task" entry (file+headline  ,(concat user/org-agenda-files "tasks"))
	  "** NEXT %? \nDEADLINE: %t")))

 ;;;; Allow access to org agenda files
 #+END_SRC
** Refile configuration
 #+BEGIN_SRC emacs-lisp
 (setq org-refile-targets '((org-agenda-files :maxlevel . 9)))


 #+END_SRC
** Always present the gtd.org file
 #+BEGIN_SRC emacs-lisp
 (find-file (concat user/org-agenda-files "gtd.org"))
 #+END_SRC
* Final Presenation to the user.
** My default coding location
 #+BEGIN_SRC emacs-lisp
 ;;;; Change to my work directory
 (cd "~/local-code-projects/my-code/common-lisp/local-projects/")
 #+END_SRC

* Report the time metrics
#+BEGIN_SRC emacs-lisp
(setq *emacs-load-end* (current-time))
(message "Time for .emacs downloading: %s loading %s " 
(float-time (time-subtract *emacs-load-end* *emacs-download*))
(float-time (time-subtract *emacs-download* *emacs-load-start*)))
#+END_SRC

