#+STARTUP: overview
#+TITLE: Emacs configuration
#+OPTIONS: num:nil ^:nil
#+EXPORT-FILENAME: init.el#+INDEX: Emacs!Configuration
* Report Debug START  :noexport:
#+BEGIN_SRC emacs-lisp
(message "Debug START")
#+END_SRC

* Emacs Housekeeping
** Generated file  warning.
#+BEGIN_SRC emacs-lisp
  ;;;; NOTE: This file had been generated from ~/.emacs.d/settings.org
  ;;;; Emacs customization is done in ~/.emacs.d/settings.org
  ;;;; ~/.emacs.d/init.el will load ~/.emacs.d/settings.el
  ;;;; ~/.emacs.d/settings.org is created and updated by *tangle* of code blocks from  settings.org
#+END_SRC

** Custom settings macro.
    [TBD] Consider if this is org-mode specific.
    per load user .org settings
    This macro loads per user customizations.
#+BEGIN_SRC emacs-lisp
  ;;;; Macro to load user customizations from .emacs.d
  (defmacro local-custom-file (file description)
    `(progn
       (require 'org)
       (message (concat "Looking for " ,description " file: " ,file ))
       (let ((file-and-path (expand-file-name ,file user-emacs-directory)))
	 (if (file-exists-p file-and-path)
	     (progn (message (concat "org-babel-load of " file-and-path))
		    (org-babel-load-file file-and-path))
	   (message (concat "Custom file is missing " file-and-path))))))

#+END_SRC

** Debug On Error

  Enable debugging.

  #+BEGIN_SRC emacs-lisp
  ;(setq debug-on-error t)
  #+END_SRC

** Load time metrics
  Mark the begining time of execution of init.el so we can compare and report
  at the end.
  #+BEGIN_SRC emacs-lisp
  ;; load time metrics
  (setq  *emacs-load-start* (current-time))
  #+END_SRC

* To Be Done :noexport:
  - [ ] Review and cleanup Documenation

* REVISIONS
  Document core emacs configuration tools.
  MSYS64 lisp launch has been removed.
  Use slime implementation (tag (commands) :env (environment vars)) with mingw start.
  The env bash sbcl launch sequence had problems.
  To run as emacs inferior there is no need for a shell.

  I marked [COMPLETE] where autocomplete or completion is configured.
  The concept is to try out helm.
* Documentation
** A few Issues
*** TODO Review and fix column view data [/]
    - [ ] Find recommened COLUMNS line
    - [ ] Hunt down COLUMN items in :PROPERTIES: drawers.
    - [ ] Fix Font size issue
      - Column view screws up the font sizing.
*** TODO  Consider capture mode to publishing notes perhaps publish the Journel
    - How to handle a publishing a  date tree?
    Current defects
    - There is face style problems when agenda views go into column view mode.
** README
 [[file:~/.emacs.d/init.el]]
 [[file:~/.emacs.d/settings.el]]
 [[file:~/.emacs.d/settings.org]]
 [[file:~/.emacs.d/README.org]]
*** Design Notes
**** Emacs organization
     This file .emacs.d/settings.org is ment to have common setup for all my use cases.
     Other files in .emacs.d/ are used for per user customization.
**** GTD organization - Review
     I used an older GTD example that was developed before org-capture.
     Current defects
     - The custom agenda views need to be reconsidered for my taste
     - I have been using tasks to write notes about my process
       - org publication is now being used to document task acitivity
	 this should lead to removal of "documentation tasks"
       - documenation task should be a capture item to be published.
**** TODO Consider adding issue/error tracking in emacs [/]
     - [ ] Reseach error issue tracking in org-mode/emacs
     - [ ] Next create action plan or defer

** Standard coding setup
*** emacs
The source of Emacs startup code is largely controlled by .emacs/setting.org
*** General
All programming code is located in ~/quicklisp/local-projects/

* Initial Frame Size
Fix initial window position.
  #+BEGIN_SRC emacs-lisp
  ;; Set initial frame size and position
  (defun my/set-initial-frame ()
    (let* ((base-factor 0.70)
          (a-width (* (display-pixel-width) base-factor))
          (a-height (* (display-pixel-height) base-factor))
          (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
          (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
      (set-frame-position (selected-frame) a-left a-top)
      (set-frame-size (selected-frame) (truncate a-width)  (truncate a-height) t)))
  (setq frame-resize-pixelwise t)
  (my/set-initial-frame)
  #+END_SRC

* Basic Look and feel
I don't like the a messy startup screen.

 #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-screen t)
   (setq visible-bell 1)
   ;;(load-theme 'vs-dark-theme)

 #+END_SRC
* Fix Windows 10 cursor problem
 #+BEGIN_SRC emacs-lisp
 (setq w32-use-visible-system-caret nil)
 #+END_SRC

* Package Archives distros                         
Good for any emacs released since 2012
#+BEGIN_SRC emacs-lisp
  (setq package-check-signature nil)
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("elpa" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives
	       '("org" . "https://orgmode.org/elpa/"))
  (package-initialize)
#+END_SRC
* Load use-package
  [TBD] Consider if this needs to be initialized
#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC
* Download Timing
This download timing mechanism is likely deprecated also.
#+BEGIN_SRC emacs-lisp
(setq *emacs-download* (current-time))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
* org-roam
  I am setting up org-roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename "~/org/roam/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+END_SRC

* Crossplatform filename
Attempt specifiy filepaths in a cross platform way.

Another strategy would be specify classes of base paths in one place and
specify specific crossplatform functions and macros for path construction.
#+BEGIN_SRC emacs-lisp
(fset 'convert-windows-filename
      (if (fboundp 'cygwin-convert-file-name-from-windows)
	  'cygwin-convert-file-name-from-windows
	  'convert-standard-filename))
#+END_SRC

* Copy Filename to Buffer
#+BEGIN_SRC emacs-lisp
(defun my-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
#+END_SRC
* Save the emacs customization to a file.
These are settings from the Emacs Customization Mechanism.
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.config/emacs/.emacs-custom.el")
(load custom-file)
#+END_SRC

* Setting up Aspell
aspell configuration is in [[~/.aspell.conf]]
The BEGIN tag was botched in the line below.
[TBD] Test if the works or can be removed.
\#+BEGOM_SRC emacs-lisp
  (setq  ispell-program-name "aspell")
  (setq  ispell-dictionary-alist '((master . en_US)))
  (require 'ispell)
\#+END_SRC
* Generic arguments, paths and strings.
#+BEGIN_SRC emacs-lisp
  (defun double-quote-string(s)
     (concat "\"" s "\""))

  (defun single-quote-string (s)
     (concat "\'" s "\'"))

  (defun double-quote-list (l)
    (mapcar 'double-quote-string l))

  (defun single-quote-list (l)
    (mapcar 'single-quote-string l))

  (defun join-with-spaces (args)
     (mapconcat 'identity args " "))
#+END_SRC
* External Subsytems
  msys2 and cygwin have internal file system roots in Windows, those roots are defined here.
** Subsytem Roots
   Define where the roots of the file systems are located on Windows.
*** Cygwin Root
  #+BEGIN_SRC emacs-lisp
	(setq +cygwin64-base-path+ "C:/cygwin64")
  #+END_SRC
*** msys2 root
  #+BEGIN_SRC emacs-lisp
    ;; Paths to msys2 file root
    (let ((mingw64-root-mount "C:/devel/msys64")
	  (mingw64-bin-mount "C:/devel/msys64/usr/bin"))

    (add-to-list 'exec-path (concat mingw64-root-mount "/mingw64/bin"))
    (add-to-list 'exec-path (concat mingw64-root-mount "/usr/local/bin"))
    (add-to-list 'exec-path (concat mingw64-root-mount "/usr/bin"))
    (add-to-list 'exec-path mingw64-bin-mount))
    (setq +msys64-base-path+ "C:/devel/msys64/")
  #+END_SRC
** Subsystem emulators
   Subsystem parts need to be emulated.
*** Cygwin Emulator
 #+BEGIN_SRC emacs-lisp
       (defun cygwin64-file-exists-p (file)
	 (file-exists-p (concat +cygwin64-base-path+ file)))
 #+END_SRC
*** msys2 Emulator
 #+BEGIN_SRC emacs-lisp
   (defun msys64-file-exists-p (file)
     (file-exists-p (concat +msys64-base-path+ file)))

   (defun msys2-command (cmd params)
      (join-with-spaces (cons (msys2-command-string cmd) params)))


   (defun msys2-command-string (cmd)
     (concat +msys64-base-path+ "usr/bin/" cmd ".exe"))
 #+END_SRC
** Tools implemanted for various subsystems
*** Cygwin Tools
    No tools for cygwin yet.
*** msys2 Tools
**** msys2/bash run
     Start a command in a msys2 shell
   #+BEGIN_SRC emacs-lisp
     (defun start-under-bash-login-shell (shell-task)
     "Excute a msys2-command under a msys2-64 bash login shell"
       (list (msys2-command-string "env")
	     (double-quote-string "MSYSTEM=MINGW64")
	     (msys2-command-string "bash")
	     "-l"
	     "-c"
	     shell-task))
    #+END_SRC
* Emacs Theme
  [TBD] Raise this to before LISP and other language stuff.
#+BEGIN_SRC emacs-lisp
(load-theme 'manoj-dark)
(set-face-attribute 'default nil :height 120)
#+END_SRC

* Rainbow Delimeters
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  ;(font-lock-comment-face ((t (:italic t :slant oblique :foreground "#9fd385"))))
  ;; (setf rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
  ;; (setf rainbow-delimiters-depth-2-face ((t (:foreground "deep pink"))))
  ;; (setf rainbow-delimiters-depth-3-face ((t (:foreground "chartreuse"))))
  ;; (setf rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
  ;; (setf rainbow-delimiters-depth-5-face ((t (:foreground "yellow"))))
  ;; (setf rainbow-delimiters-depth-6-face ((t (:foreground "orchid"))))
  ;; (setf rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
  ;; (setf rainbow-delimiters-depth-8-face ((t (:foreground "sienna1"))))
#+END_SRC

* Shells
  [TBD] Decide what is CRUFF here.
  I am attempting to use the friendly-shell infrastructure.

  shell/git-bash works but has prompt problems.
#+BEGIN_SRC emacs-lisp
      (use-package friendly-shell
	:ensure t
	:config   
	  (defun shell/git-bash (&optional path)
	     (interactive)
	     (friendly-shell :path path
			     :interpreter "C:/Program Files/Git/bin/bash.exe"
			     ;;:interpreter-args '("-l")
			     )))


      (use-package friendly-remote-shell
	:ensure t
	:config
	   (defun shell/cisco (&optional path)
	     (interactive)
	     (with-shell-interpreter-connection-local-vars
	       (friendly-remote-shell :path path))))



	  ;; (setq win-shell-implementaions
		    ;;       `((cmd (shell))
		    ;; 	(ming64 ((defun my-shell-setup ()
		    ;;        "For Cygwin bash under Emacs 20"

		    ;;          (setq comint-scroll-show-maximum-output 'this)
		    ;;          (make-variable-buffer-local 'comint-completion-addsuffix))
		    ;;            (setq comint-completion-addsuffix t)
		    ;;            ;; (setq comint-process-echoes t) ;; reported that this is no longer needed
		    ;;            (setq comint-eol-on-send t)
		    ;;            (setq w32-quote-process-args ?\")
		    ;;            (add-hook 'shell-mode-hook 'my-shell-setup)))))

		    ;; (defun win-shell ())

		    ;; ;;; The MSYS-SHELL

		    ;; (defun msys-shell () 
		    ;;   (interactive)
		    ;;   (let ((explicit-shell-file-name (convert-standard-filename "c:/devel/msys64/usr/bin/bash.exe"))
		    ;; 	(shell-file-name "bash")
		    ;; 	(explicit-bash.exe-args '("--noediting" "--login" "-i"))) 
		    ;;     (setenv "SHELL" shell-file-name)
		    ;;     (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
		    ;;     (shell)))

		    ;; ;;; The MINGW64-SHELL

		    ;; (defun mingw64-shell () 
		    ;;        (interactive)
		    ;;        (let (( explicit-shell-file-name (convert-standard-filename  "c:/devel/msys64/mingw64/bin/bash.exe")))
		    ;; 	 (shell "*bash*")
		    ;; 	     (call-interactively 'shell)))
#+END_SRC
** Add shell extensions
#+BEGIN_SRC emacs-lisp
(use-package shx
  :ensure t)
#+END_SRC
* Tramp                                                            
[TBD] Review if this is correct after SSH has been reinstalled.
** The default connection method is plink
#+BEGIN_SRC emacs-lisp
(require 'tramp)
(setq tramp-default-method "plink")
;(setq tramp-verbose 10)
#+END_SRC
** Remote shell to cisco
#+BEGIN_SRC emacs-lisp
(defun cisco-remote-shell ()
  (interactive)
  (let ((default-directory "/plink:osmc@192.168.1.43:~"))
  (shell)))
#+END_SRC
* IDO                                              
[TBD] Why do I need ido, What does it do for me?
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
#+END_SRC

* Configure Autocomplete
  [COMPLETE]
Need to consider using HELM here
#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC

* LISP Language
  [TBD] Add SBCL CLISP slime and related stuff to this topic.
** Provision Various Common LISPs
 #+INDEX: Common Lisp!Provisioning
 Universal Startup Code should be here.
*** Provision standard SBCL
 #+BEGIN_SRC emacs-lisp
    (defun standard-sbcl-options()
      '("--noinform"))
 #+END_SRC
*** RAW Binary
**** Common
#+BEGIN_SRC emacs-lisp
  (defun only-sbcl-p (tag exec-path env)
      (when (file-exists-p exec-path)
         (list tag
	   `( ,exec-path ,@(double-quote-list (standard-sbcl-options)))
	       :env
	       env)))
#+END_SRC
**** Provision the LISPs
#+INDEX: SBCL!Slime provisioning
#+BEGIN_SRC emacs-lisp
      (defun sbcl-2-0-0 ()
	(only-sbcl-p 'sbcl-2.0.0 "C:/devel/msys64/usr/local/sbcl-2.0.0/bin/sbcl.exe"
	             (list (concat "HOME=" (getenv "HOME")) "SBCL_HOME=C:/devel/msys64/usr/local/sbcl-2.0.0/lib/sbcl")))

      (defun sbcl-2-2-1()
	(only-sbcl-p 'sbcl-2.2.1 "C:/devel/msys64/usr/local/sbcl-2.2.1/bin/sbcl.exe"
		     (list (concat "HOME=" (getenv "HOME")) "SBCL_HOME=C:/devel/msys64/usr/local/sbcl-2.2.1/lib/sbcl")))
				

#+END_SRC
*** Provision ABCL
  #+BEGIN_SRC emacs-lisp
  (defmacro provision-abcl()
    `(when (and (file-exists-p  (convert-standard-filename "C:/Program Files/ABCL/abcl.jar")))
	  `(abcl  ("java" "-jar" ,(convert-standard-filename "C:/Program Files/ABCL/abcl.jar")))))
  #+END_SRC
*** Provision CCL
    #+BEGIN_SRC emacs-lisp
      (defun provision-ccl ()
	(let ((ccl "C:/Users/zzzap/quicklisp/local-projects/ccl/wx86cl64.exe"))
          (when (file-exists-p ccl)
            `(ccl-64 (,ccl)))))
    #+END_SRC

*** Provision CLISP
**** On MSYS2
#+BEGIN_SRC emacs-lisp
  (defun provision-clisp-msys64 ()
    (when nil
    `(clisp-msys64 ())))
#+END_SRC
**** On CYGWIN when emacs running under cygwin
#+BEGIN_SRC emacs-lisp
  (defun provision-clisp-cygwin64()
    (when nil
    `(clisp-cygwin64 ())))
#+END_SRC
** SLIME
   Slime is the inferface to LISP on emacs.
 #+INDEX: Common Lisp!Slime Provisioning
*** quicklisp-helper
 Load the quicklisp-helper file 
 #+INDEX: Common Lisp!quicklisp, slime helper
 #+INDEX: quicklisp!slime helper
 #+INDEX: Slime!quicklisp helper
 #+BEGIN_SRC emacs-lisp
   ;;;; Build the implemenation lisp dynamically.
   ;;;; Remove all nil items from the list.
     ;;;; Load slime helper
     (load (expand-file-name "~/quicklisp/slime-helper.el"))
 #+END_SRC
*** slime-lisp-implementations
 #+INDEX: Slime!LISP Implmentations
 #+BEGIN_SRC emacs-lisp
     (setq slime-lisp-implementations
	   (seq-filter (lambda (e) e)
	     (list
	       (sbcl-2-2-1)
	       (sbcl-2-0-0)
	       (provision-ccl)
	       (provision-clisp-msys64)
	       (provision-clisp-cygwin64))))
	      ; (provision-abcl)
 #+END_SRC

*** Common Lisp HyperSpec
  I use my local clone of the Hyperspec
  #+BEGIN_SRC emacs-lisp
  (setq common-lisp-hyperspec-root (convert-standard-filename (getenv "HyperSpec")))
  #+END_SRC

*** Option  for SLIME
    Can I delete this?
  #+BEGIN_SRC emacs-lisp
  (setq slime-contribs '(slime-fancy))
  (global-set-key "\C-cs" 'slime-selector)
  #+END_SRC

*** Slime Autocomplete
    [COMPLETE}
  #+BEGIN_SRC emacs-lisp
  (require 'ac-slime)
  (add-hook 'slime-mode-hook 'set-up-slime-ac)
  (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
  (eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'slime-repl-mode))
  #+END_SRC

*** Paredit mode
  #+BEGIN_SRC emacs-lisp
  (add-hook 'lisp-mode-hook #'paredit-mode)
  #+END_SRC

*** Auto complete mode for LISP
    [COMPLETE]
  #+BEGIN_SRC emacs-lisp
  (add-hook 'lisp-mode-hook #'auto-complete-mode)
  #+END_SRC

*** Enable lisp-mode .lisp and .asd files
  #+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
	(append '((".*\\.asd\\'" . lisp-mode))
		auto-mode-alist))

  (setq auto-mode-alist
	(append '((".*\\.cl\\'" . lisp-mode))
		auto-mode-alist))
  #+END_SRC

* Pascal Setup
  [TBD] I have no pascal compiler configured.
#+BEGIN_SRC emacs-lisp
(add-hook 'pascal-mode-hook
	  (lambda ()
	    (set (make-local-variable 'compile-command)
		 (concat "fpc " (file-name-nondirectory (buffer-file-name)))))
	  t)

(setq auto-mode-alist
      (append '((".*\\.pas\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.pp\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.yml\\'" . yaml-mode))
	      auto-mode-alist))
#+END_SRC

* Ord Mode Customizations
#+INDEX: org-mode!main configuration
The newest redesign of org mode gtd is to use a per user setup with no public shared data.
All the newest stuff will be in ~/org/gtd/
** Create permanent links for each heading in an org file.
   Create CUSTOM_ID for each heading bases on a uniqure random sequence.
 #+BEGIN_SRC emacs-lisp
	     (require 'org-id)
	     (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

	   (defun eos/org-custom-id-get (&optional pom create prefix)
	     "Get the CUSTOM_ID property of the entry at point-or-marker POM.
	      If POM is nil, refer to the entry at point. If the entry does
	      not have an CUSTOM_ID, the function returns nil. However, when
	      CREATE is non nil, create a CUSTOM_ID if none is present
	      already. PREFIX will be passed through to `org-id-new'. In any
	      case, the CUSTOM_ID of the entry is returned."
	     (interactive)
	     (org-with-point-at pom
	       (let ((id (org-entry-get nil "CUSTOM_ID")))
		 (cond
		  ((and id (stringp id) (string-match "\\S-" id))
		   id)
		  (create
		   (setq id (org-id-new (concat prefix "h")))
		   (org-entry-put pom "CUSTOM_ID" id)
		   (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
		   id)))))

     (defun org-id-new (&optional prefix)
       "Create a new globally unique ID.

     An ID consists of two parts separated by a colon:
     - a prefix
     - a unique part that will be created according to `org-id-method'.

     PREFIX can specify the prefix, the default is given by the variable
     `org-id-prefix'.  However, if PREFIX is the symbol `none', don't use any
     prefix even if `org-id-prefix' specifies one.

     So a typical ID could look like \"Org-4nd91V40HI\"."
       (let* ((prefix (if (eq prefix 'none)
			  ""
			(concat (or prefix org-id-prefix) "-")))
	      unique)
	 (if (equal prefix "-") (setq prefix ""))
	 (cond
	  ((memq org-id-method '(uuidgen uuid))
	   (setq unique (org-trim (shell-command-to-string org-id-uuid-program)))
	   (unless (org-uuidgen-p unique)
	     (setq unique (org-id-uuid))))
	  ((eq org-id-method 'org)
	   (let* ((etime (org-reverse-string (org-id-time-to-b36)))
		  (postfix (if org-id-include-domain
			       (progn
				 (require 'message)
				 (concat "@" (message-make-fqdn))))))
	     (setq unique (concat etime postfix))))
	  (t (error "Invalid `org-id-method'")))
	 (concat prefix unique)))

	 ;; automatically add ids to captured headlines
	 (add-hook 'org-capture-prepare-finalize-hook
		   (lambda () (eos/org-custom-id-get (point) 'create)))


   (defun org-id-new (&optional prefix)
     "Create a new globally unique ID.

   An ID consists of two parts separated by a colon:
   - a prefix
   - a unique part that will be created according to `org-id-method'.

   PREFIX can specify the prefix, the default is given by the variable
   `org-id-prefix'.  However, if PREFIX is the symbol `none', don't use any
   prefix even if `org-id-prefix' specifies one.

   So a typical ID could look like \"Org-4nd91V40HI\"."
     (let* ((prefix (if (eq prefix 'none)
			""
		      (concat (or prefix org-id-prefix) "-")))
	    unique)
       (if (equal prefix "-") (setq prefix ""))
       (cond
	((memq org-id-method '(uuidgen uuid))
	 (setq unique (org-trim (shell-command-to-string org-id-uuid-program)))
	 (unless (org-uuidgen-p unique)
	   (setq unique (org-id-uuid))))
	((eq org-id-method 'org)
	 (let* ((etime (org-reverse-string (org-id-time-to-b36)))
		(postfix (if org-id-include-domain
			     (progn
			       (require 'message)
			       (concat "@" (message-make-fqdn))))))
	   (setq unique (concat etime postfix))))
	(t (error "Invalid `org-id-method'")))
       (concat prefix unique)))


 (defun eos/org-add-ids-to-headlines-in-file ()
   "Add CUSTOM_ID properties to all headlines in the current
    file which do not already have one. Only adds ids if the
    `auto-id' option is set to `t' in the file somewhere. ie,
    #+OPTIONS: auto-id:t"
   (interactive)
   (save-excursion
     (widen)
     (goto-char (point-min))
     (when (re-search-forward "^#\\+OPTIONS:.*auto-id:t" (point-max) t)
       (org-map-entries (lambda () (eos/org-custom-id-get (point) 'create))))))

       ;; automatically add ids to saved org-mode headlines
       (add-hook 'org-mode-hook
		 (lambda ()
		   (add-hook 'before-save-hook
			     (lambda ()
			       (when (and (eq major-mode 'org-mode)
					  (eq buffer-read-only nil))
				 (eos/org-add-ids-to-headlines-in-file))))))



 #+END_SRC
** org mode location
#+BEGIN_SRC emacs-lisp
(setf org-mode-base-dir "~/org/")
#+END_SRC
** gtd location
#+BEGIN_SRC emacs-lisp
(setf org-gtd-dir (concat org-mode-base-dir "gtd/"))
#+END_SRC
** Org Key Binding
 #+BEGIN_SRC emacs-lisp
 ;;;; Org Mode key bindings.
 (global-set-key (kbd "C-c l") 'org-store-link)
 (global-set-key (kbd "C-c a") 'org-agenda)
 (global-set-key (kbd "C-c c") 'org-capture)
 (global-set-key (kbd "C-c b") 'org-switchb)
 #+END_SRC

** Configure BABEL languages
 [TBD] Do I really need to specify these at all?
 #+BEGIN_SRC emacs-lisp
 (org-babel-do-load-languages
  'org-babel-load-languages
  '((lisp . t)
    (emacs-lisp . t)))
 #+END_SRC

** org modules needed
 [TBD] Do I need org-habit  here?
 #+BEGIN_SRC emacs-lisp
 (setq org-modules '(org-habit org-checklist))
 #+END_SRC

** org-habit
 [TBD] Find out why I Should not delete this.
 #+BEGIN_SRC emacs-lisp
 (setq org-habit-graph-column 50)
 #+END_SRC

** Org link abbreviations
 #+BEGIN_SRC emacs-lisp
 (setq org-link-abbrev-alist
       '(("bugzilla" . "http://192.168.1.50/bugzilla/show_bug.cgi?id=")
	 ("bugzilla-comp" . "http://192.168.1.50/bugzilla/describecomponents.cgi?product=")))
 #+END_SRC
** Customize by Environmemt
*** customization macros
[TBD] Should this macro be closer to the top of the file for reuse?
#+BEGIN_SRC emacs-lisp
  ;;; Specify a emacs variable from an environment variable env-string or  base,new-path-string
  (defmacro default-or-environment (emacs-var base new-path-string env-string) 
    `(setq ,emacs-var (if (getenv ,env-string)
                          (getenv ,env-string)
                          (concat ,base ,new-path-string))))
#+END_SRC

*** Ensure there are standard user ~/org directories
 [TBD] is this how I am configured now?
 How to define the standard HOME org directory.
 Under windows and linux this is ~/org.
 
  #+BEGIN_SRC emacs-lisp
  ;; Create stadard org directories if not already present.
  ;; The standard user directory is ~/org in the HOME directory.
  ;; Override with the var ORG-USER-DIR.
  ;; The org-public-dir is a legacy model for shared tasks across all users.
  ;; The public shared model is to be deprecated in the light of the task-agenda model.
  (default-or-environment org-user-dir (getenv "HOME") "/org" "ORG-USER-DIR")
  (unless (file-directory-p org-user-dir)
    (make-directory  org-user-dir))
  ;; Define a global org directory
  (default-or-environment org-public-dir "c:/Users/Public/Documents" "/org" "ORG-PUBLIC-DIR")
  #+END_SRC

*** Standard Notes file
 [TBD] Is this still relavent?
 This is a standard per User notes file.
 Unser windows and linux this ~/org/notes/notes.org
  #+BEGIN_SRC emacs-lisp
  ;; The Standard org note file is ~/org/notes/notes.
  ;; This can be set by the environment variable ORG-NOTES-FILE
  (default-or-environment org-notes-file org-user-dir "/nodes/notes.org" "ORG-NOTES-FILE")
  (setq org-default-notes-file org-notes-file)
  #+END_SRC

** Task agenda context
 - This starts an agenda context
 #+BEGIN_SRC emacs-lisp
 ;;;; Customize the agenda locally
 (local-custom-file "local-custom-agenda.org" "Customize org-agenda")
 #+END_SRC
  - The following may be defined with the above values
    
** Capture Templates
Use [[~/.emacs.d/local-capture.org]] to change the capture template.
 #+BEGIN_SRC emacs-lisp
 ;;;; Customize the agenda locally
 (local-custom-file "local-capture.org" "Customize org-capture")
 #+END_SRC
** Refile configuration
 #+BEGIN_SRC emacs-lisp
 (setq org-refile-targets `( (,(concat org-gtd-dir "new-gtd.org") :maxlevel . 1)
                             (,(concat org-gtd-dir "Someday.org") :maxlevel . 2)))
 #+END_SRC

** Always present the new-gtd.org file
Customize  this default by environment variable USER_REOPEN_FILES
 #+BEGIN_SRC emacs-lisp
 (find-file (concat org-gtd-dir "new-gtd.org"))
 #+END_SRC
 
** Fix for cmdproxy
Allow Windows CMD commands to be run from .org files.
See https://emacs.stackexchange.com/questions/19037/org-babel-invoking-cmd-exe

How to use, note "cmdproxy.exe" is a Windows Emacs file.
#+BEGIN_EXAMPLE
\#+BEGIN_SRC sh :shcmd "cmdproxy.exe"
dir
\#+END_SRC
#+END_EXAMPLE
#+BEGIN_SRC emacs-lisp
(require 'ob-shell)
(defadvice org-babel-sh-evaluate (around set-shell activate)
  "Add header argument :shcmd that determines the shell to be called."
  (defvar org-babel-sh-command)
  (let* ((org-babel-sh-command (or (cdr (assoc :shcmd params)) org-babel-sh-command)))
    ad-do-it))
#+END_SRC
** org-publish
#+BEGIN_SRC emacs-lisp
;;;; org-publishing is a local configuration.
(local-custom-file "local-publishing.org" "Configuration of org-publishing")
#+END_SRC  

* Final Presenation to the user.

** load per user settings
 #+BEGIN_SRC emacs-lisp
;;;; Various user settings is a local configuration.
 (local-custom-file "local-settings.org" "Final user settings")
 #+END_SRC

* Report the time metrics
#+BEGIN_SRC emacs-lisp
(setq *emacs-load-end* (current-time))
(message "Time for .emacs downloading: %s loading %s " 
(float-time (time-subtract *emacs-load-end* *emacs-download*))
(float-time (time-subtract *emacs-download* *emacs-load-start*)))
#+END_SRC

* Report Debug Mark :noexport:
#+BEGIN_SRC emacs-lisp
(message "Debug MARK")
#+END_SRC
* Report Debug End :noexport:
#+BEGIN_SRC emacs-lisp
(message "Debug END")
#+END_SRC
