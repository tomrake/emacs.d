#+EXPORT-FILENAME init.el

* A measure the load time
#+BEGIN_SRC emacs-lisp
;; load time metrics
(setq  *emacs-load-start* (current-time))
#+END_SRC

* Save the emacs customization to a file.
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs-custom.el")
(load custom-file)
#+END_SRC
* An attempt at crossplatform filename
#+BEGIN_SRC emacs-lisp
;;
(fset 'convert-windows-filename
      (if (fboundp 'cygwin-convert-file-name-from-windows)
	  'cygwin-convert-file-name-from-windows
	  'convert-standard-filename))
#+END_SRC
* Startup
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq visible-bell 1)
#+END_SRC
* MSYS2/MINGW64 Path elements
#+BEGIN_SRC emacs-lisp
(let ((mingw64-root-mount "C:/devel/msys64")
      (mingw64-bin-mount "C:/devel/msys64/usr/bin"))
  
(add-to-list 'exec-path (concat mingw64-root-mount "/mingw64/bin"))
(add-to-list 'exec-path (concat mingw64-root-mount "/usr/local/bin"))
(add-to-list 'exec-path (concat mingw64-root-mount "/usr/bin"))
(add-to-list 'exec-path mingw64-bin-mount))
#+END_SRC
* Rebuild PATH based on current exec-path
#+BEGIN_SRC emacs-lisp
;;;  Now rebuild path based on exec-path
(setenv "PATH" (mapconcat #'identity exec-path path-separator))

#+END_SRC
* Package loading mechanism needs review
#+BEGIN_SRC emacs-lisp
;;;; Download packages from MELPA

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/")
	     t)
(add-to-list 'package-archives
	     '("elpa" . "https://elpa.gnu.org/packages/")
	     t)

(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")))

(package-initialize)


;;;; These are the packages needed

(defvar local-packages '(flx-ido
			 auto-complete
			 epc
			 slime
			 rainbow-delimiters
			 paredit
			 ac-slime
			 cyberpunk-theme
			 dracula-theme
			 dakrone-theme
			 popup
			 jedi
			 docker-tramp
			 dockerfile-mode
			 pillar
			 cmake-mode
			 yaml-mode
			 ess
			 deft
			 magit
			 htmlize))


;;;; Find any unistalled package

(defun uninstalled-packages (packages)
  (delq nil
	(mapcar (lambda (p)
		  (if (package-installed-p p nil) nil p))
		packages)))

;;;; Install any uninsalled packages

(let ((need-to-install
       (uninstalled-packages local-packages)))
  (when need-to-install
    (progn
      (package-refresh-contents)
      (dolist (p need-to-install)
	(package-install p)))))

#+END_SRC

* Load all the Public Emacs files
#+BEGIN_SRC emacs-lisp
(load (convert-windows-filename "C:/Users/Public/Documents/emacs/.emacs"))
#+END_SRC

* These are from customization inteface
** TODO Document this Custom Theme stuff                           :noexport:
   - only ONE custom-set-variables in Org Init
   - Can I just setq the TOP LEVEL quoted var here?
#+BEGIN_SRC emacs-lisp

 (if nil 
 (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(ansi-color-faces-vector
    [default default default italic underline success warning error])
  '(ansi-color-names-vector
    ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff" "#eeeeec"])
  '(custom-enabled-themes (quote (manoj-dark)))
  '(custom-safe-themes
    (quote
     ("e269026ce4bbd5b236e1c2e27b0ca1b37f3d8a97f8a5a66c4da0c647826a6664" "e9460a84d876da407d9e6accf9ceba453e2f86f8b86076f37c08ad155de8223c" "ff7625ad8aa2615eae96d6b4469fcc7d3d20b2e1ebc63b761a349bebbb9d23cb" "d6922c974e8a78378eacb01414183ce32bc8dbf2de78aabcc6ad8172547cb074" "38e64ea9b3a5e512ae9547063ee491c20bd717fe59d9c12219a0b1050b439cdd" "561ba4316ba42fe75bc07a907647caa55fc883749ee4f8f280a29516525fc9e8" default)))
  '(fci-rule-color "#383838")
  '(package-selected-packages
    (quote
     (dakrone-theme dockerfile-mode docker-tramp anaconda-mode popup cyberpunk-theme ac-slime paredit rainbow-delimiters slime epc auto-complete flx-ido)))
  '(safe-local-variable-values (quote ((org-use-property-inheritance . t)))))
 )
#+END_SRC
** Rainbow Delimters custom faces                                  :noexport:
   - only one custom-set-faces in init files.
#+BEGIN_SRC emacs-lisp
 (if nil
 (custom-set-faces
  '(font-lock-comment-face ((t (:italic t :slant oblique :foreground "#9fd385"))))
  '(rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
  '(rainbow-delimiters-depth-2-face ((t (:foreground "deep pink"))))
  '(rainbow-delimiters-depth-3-face ((t (:foreground "chartreuse"))))
  '(rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
  '(rainbow-delimiters-depth-5-face ((t (:foreground "yellow"))))
  '(rainbow-delimiters-depth-6-face ((t (:foreground "orchid"))))
  '(rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
  '(rainbow-delimiters-depth-8-face ((t (:foreground "sienna1")))))
  )
#+END_SRC



* Ord Mode Customizations
** Org Key Binding
 #+BEGIN_SRC emacs-lisp
 ;;;; Org Mode key bindings.
 (global-set-key (kbd "C-c l") 'org-store-link)
 (global-set-key (kbd "C-c a") 'org-agenda)
 (global-set-key (kbd "C-c c") 'org-capture)
 (global-set-key (kbd "C-c b") 'org-switchb)
 #+END_SRC
** Configure BABEL languages
 #+BEGIN_SRC emacs-lisp
 (org-babel-do-load-languages
  'org-babel-load-languages
  '((lisp . t)
    (emacs-lisp . t)))
 #+END_SRC
** org modules needed
 #+BEGIN_SRC emacs-lisp
 (setq org-modules '(org-habit org-checklist))
 #+END_SRC
** Configure habit (do not remember why)
 #+BEGIN_SRC emacs-lisp
 (setq org-habit-graph-column 50)
 #+END_SRC
** Org link abbreviations
 #+BEGIN_SRC emacs-lisp
 (setq org-link-abbrev-alist
       '(("bugzilla" . "http://192.168.1.50/bugzilla/show_bug.cgi?id=")
	 ("bugzilla-comp" . "http://192.168.1.50/bugzilla/describecomponents.cgi?product=")))
 #+END_SRC
** Ensure there are stadard ~/org directories
 #+BEGIN_SRC emacs-lisp
 ;; Each user has a org directory in ~/org ensure it exists
 (unless (file-directory-p "~/org")
   (make-directory  "~/org"))
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
 (setq org-default-notes-file "~/org/notes.org")


 ;(require 'org-checklist)

 ;;;; Add MikTex executables to path
 ;(add-to-list 'exec-path "/c/Users/zzzap/AppData/Local/Programs/MiKTeX/miktex/bin/x64")
 #+END_SRC
** Standard work directory
 #+BEGIN_SRC emacs-lisp
 ;;;; Change to my work directory
 (cd "~/local-code-projects/my-code/common-lisp/local-projects/")
 #+END_SRC
** Standard org and org-agenda files
 #+BEGIN_SRC emacs-lisp
 ;; My org files
 (setq user/org-files "~/org/")
 (setq user/org-agenda-files "~/org/agenda/")

 (setq org-agenda-files `(,user/org-agenda-files))
 #+END_SRC
** Always present the gtd.org file
 #+BEGIN_SRC emacs-lisp
 (find-file (concat user/org-agenda-files "gtd.org"))
 #+END_SRC
** A few custom checklists
 #+BEGIN_SRC emacs-lisp
 (defun morning-checklist-writer()
   (format "* Morning Checklist
   - [ ] Morning Tray for Mom [/]
     - [ ] Morning Medications
     - [ ] Breakfast
       - [ ] Cereal 4oz milk
     - [ ] 4oz water 1/2 TSP metamucil
     - [ ] Spoon
   - [ ] Feed Cat
   - [ ] Eat YOUR Breakfast
 " nil))

 (defun monthly-tasks-for-james-seese ()
   (format "* Monthly Tasks: James Seese
   - [ ] Process all inbound mail.
   - [ ] Separate mail by entity
   - [ ] list all oustanding bills
   - [ ] list all oustanding deposits
   - [ ] Make deposit list
     - [ ] vendor
     - [ ] amount
   - [ ] Make check list
     - [ ] Vendor
     - [ ] Amount
   - [ ] Write and mail checks" nil))
 #+END_SRC
** Capture Templates
 #+BEGIN_SRC emacs-lisp
 ;;; See: http://cachestocaches.com/2016/9/my-workflow-org-agenda/
 (setq org-capture-templates
       `(("t" "todo" entry (file ,(concat user/org-agenda-files "gtd.org"))
	  "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
	 ("n" "note" entry (file ,(concat user/org-agenda-files  "gtd.org"))
	  "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
 ;; Medical Appointments
 ;; Medical Appointment  (m) Medical template
    ("m" "MEDICAL   (m) Medical" entry (file ,(concat user/org-agenda-files "gtd.org"))
     "* Medical %^{Who} %?
   CLOSED: %^U
   :PROPERTIES:
   :Attend:   Tom Rake
   :Location:
   :Via:
   :Note:
   :END:
   :LOGBOOK:
   - State \"MEETING\"    from \"\"           %U
   :END:
   %^T--%^T" :empty-lines 1)
 ;; Historic Meeting Template
 ;; ("m" "Meeting" entry (file  ,(concat user/org-agenda-files "gtd.org"))
 ;;  "* MEETING with %^{Meeting with:} %?" :clock-in t :clock-resume t)

 ;; Shoppping Items
    ("s" "Shopping List - Needed (s)" entry (file ,(concat user/org-agenda-files "gtd.org"))
     "* Shopping Item %^{Needed Item} %?
   CLOSED: %U
   :PROPERTIES:
   :URGENCY: %^{Urgency?|Regular Trip|ASAP|Next Day}
   :END:
 ")
	 ("i" "Idea" entry (file ,(concat user/org-agenda-files "gtd.org"))
	  "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
	 ("j" "Journal" entry (file+datetree ,(concat user/org-files "diary.org"))
	  "* %U %^{Title}\n  -%?" :clock-in t :clock-resume t)
	 ("n" "Next Task" entry (file+headline  ,(concat user/org-agenda-files "tasks"))
	  "** NEXT %? \nDEADLINE: %t")))

 ;;;; Allow access to org agenda files
 #+END_SRC
** Refile configuration
 #+BEGIN_SRC emacs-lisp
 (setq org-refile-targets '((org-agenda-files :maxlevel . 9)))


 #+END_SRC
* Report the time metrics
#+BEGIN_SRC emacs-lisp
(setq *emacs-load-end* (current-time))
(message "My .emacs loaded in %s " (float-time (time-subtract *emacs-load-end* *emacs-load-start*)))
#+END_SRC

