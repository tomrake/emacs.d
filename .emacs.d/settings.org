
#+EXPORT-FILENAME init.el
* README
** READ NOTES MESSAGE
#+BEGIN_SRC emacs-lisp
;;;; See the README in ~/emacs.d/settings.org has documentation on emacs, common-lisp setup.
#+END_SRC
** Each User has a role
I have different roles on my PC. And each role had different sharing requirements.
Each role has different setup files.
Each role is represented by a specific user on my PC.

** The public user is a common shared user
Shared configuration across many user is done by files in the public user.
These files are referenced by each user configuration file, see the org configuration in this file for en example.
The Public user contains a copy of the primary template for emacs settings in a git repo.

** Issues with .sbclrc 
I generally use SBCL and I use quicklisp.

The following is by main .sbclrc file which is a per user file.

#+BEGIN_SRC lisp
;;;;          -*-  mode: lisp;  -*-

;;; The following lines added by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init (merge-pathnames
                       "local-code-projects/my-code/common-lisp/setup.lisp"
                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init))
  (print "loading Quicklisp"))
  
;;; Add additional repository directories by Thomas Rake
#+quicklisp
(let ((paths '(#P"C:/Users/zzzap/local-code-projects/my-code/common-lisp/local-attic/" ; very old code
               #P"C:/Users/Public/Documents/repos/")))                                 ; Public code repos
   (dolist (p paths) (when (and p (probe-file p) (not (member p ql:*local-project-directories*)))
                        (print (format t "Adding ~A to quicklisp local projects directory." p))
                        (setf ql:*local-project-directories* (cons p ql:*local-project-directories*)))))

#+END_SRC

The variable path could be constructed based on the user executiong the .sbclrc file. This would make
the .sbclrc file universal.

** WIP Stash of resources
https://dev.to/fedekau/automatically-managing-personal-and-work-git-configurations-27ad
https://www.wyeworks.com/blog/2018/01/03/using-git-hooks-to-improve-your-day-to-day-workflow/

* Generated File Warning
Add a warning to init.el that it is
#+BEGIN_SRC emacs-lisp
;;;; This file had been generated from settings.org
#+END_SRC

* Debug On Error

Enable debugging.

#+BEGIN_SRC emacs-lisp
;(setq debug-on-error t)
#+END_SRC

* Load time metrics
Mark the begining time of execution of init.el so we can compare and report
at the end.
#+BEGIN_SRC emacs-lisp
;; load time metrics
(setq  *emacs-load-start* (current-time))
#+END_SRC

* Package Archives distros                                           :review:
Which online distros we use to get packages.
Much of this is legacy code and needs review.
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/")
	     t)
(add-to-list 'package-archives
	     '("elpa" . "https://elpa.gnu.org/packages/")
	     t)
(add-to-list 'package-archives
             '("org" . "https://orgmode.org/elpa/")
              t)
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)
#+END_SRC

* Package loading mechanism needs review                             :review:
This revinvent the wheel mechanism is deprecated.
#+BEGIN_SRC emacs-lisp :tangle no

;;;; These are the packages needed

(defvar local-packages '(flx-ido
			 auto-complete
			 epc
			 slime
			 rainbow-delimiters
			 paredit
			 ac-slime
			 cyberpunk-theme
			 dracula-theme
			 dakrone-theme
			 popup
			 jedi
			 docker-tramp
			 dockerfile-mode
			 pillar
			 cmake-mode
			 yaml-mode
			 ess
			 deft
			 magit
			 htmlize))


;;;; Find any unistalled package

(defun uninstalled-packages (packages)
  (delq nil
	(mapcar (lambda (p)
		  (if (package-installed-p p nil) nil p))
		packages)))

;;;; Install any uninsalled packages

(let ((need-to-install
       (uninstalled-packages local-packages)))
  (message "Checking for unistalled  packages: %s." need-to-install)
  (when need-to-install
    (progn
      (package-refresh-contents)
      (dolist (p need-to-install)
        (message "Downloading %s." p)
	(package-install p)))))
#+END_SRC

* Download Timing
This download timing mechanism is likely deprecated also.
#+BEGIN_SRC emacs-lisp
(setq *emacs-download* (current-time))
#+END_SRC

* Basic Look and feel
I don't like the a messy startup screen.

 #+BEGIN_SRC emacs-lisp
 (setq inhibit-startup-screen t)
 (setq visible-bell 1)
 #+END_SRC

* Fix Windows 10 cursor problem
 #+BEGIN_SRC emacs-lisp
 (setq w32-use-visible-system-caret nil)
 #+END_SRC

* Crossplatform filename
Attempt specifiy filepaths in a cross platform way.

Another strategy would be specify classes of base paths in one place and
specify specific crossplatform functions and macros for path construction.
#+BEGIN_SRC emacs-lisp
(fset 'convert-windows-filename
      (if (fboundp 'cygwin-convert-file-name-from-windows)
	  'cygwin-convert-file-name-from-windows
	  'convert-standard-filename))
#+END_SRC


* Save the emacs customization to a file.
These are settings from the Emacs Customization Mechanism.
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs-custom.el")
(load custom-file)
#+END_SRC

* MSYS2/MINGW64 Path elements
Mingw requires careful crafting of  paths and emulation of mount points.
Any LISP built under mingw has an assumed environment of the build.
#+BEGIN_SRC emacs-lisp
;;; Add mingw path elements to exec path
(let ((mingw64-root-mount "C:/devel/msys64")
      (mingw64-bin-mount "C:/devel/msys64/usr/bin"))
  
(add-to-list 'exec-path (concat mingw64-root-mount "/mingw64/bin"))
(add-to-list 'exec-path (concat mingw64-root-mount "/usr/local/bin"))
(add-to-list 'exec-path (concat mingw64-root-mount "/usr/bin"))
(add-to-list 'exec-path mingw64-bin-mount))
(setq +msys64-base-path+ "C:/devel/msys64/")
(defun lisp-mingw64-implementation (tag)
  "Create a slime implemenation in the local mingw64 system naned tag."
  `(,tag (,(concat +msys64-base-path+ "usr/bin/env.exe") "MSYSTEM=MINGW64"
	  ,(concat +msys64-base-path+ "usr/bin/bash.exe") "-l" "-c" "/usr/local/bin/sbcl --noinform")))
;;;  Now rebuild path environment variable based on exec-path
(setenv "PATH" (mapconcat #'identity exec-path path-separator))
#+END_SRC

* Setup SBCL
This is where I keep my quirky self compiled SBCL compiled under msys2
#+BEGIN_SRC emacs-lisp
(setq SBCL_HOME_SAVE (getenv "SBCL_HOME"))
(setq SBCL_BASE "C:/devel/SBCL_2_0_0-bin")
#+END_SRC

* Configure Autocomplete
Need to consider using HELM here
#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC

* Copy OS PATH to emacs path
This seems unused.
#+BEGIN_SRC emacs-lisp
(setq PATH_SAVE (getenv "PATH"))
#+END_SRC

* Provision Various Common LISPs

** Provision user compiled SBCL
 #+BEGIN_SRC emacs-lisp
 (defmacro user-compiled-mingw64-sbcl ()
   `(when  (file-exists-p (concat +msys64-base-path+ "/usr/local/bin/sbcl.exe"))
       (lisp-mingw64-implementation 'mingw64-sbcl)))
 #+END_SRC

** Provions binary SBCL 2.0.0
 This is assumed to be broken.
 #+BEGIN_SRC emacs-lisp :tangle no
 (defmacro binary-supplied-sbcl-2-0-0 ()
   (when (boundp 'SBCL_BASE) 
	      (cond  
		   
		    ((string= SBCL_BASE "C:/devel/SBCL_2_0_0-bin")
		     (progn
		       (unless (boundp 'SBCL-IN-PATH)
			 (setenv "PATH"
				 (concat
				  SBCL_BASE
				  "/bin/"
				  ";"
				  (getenv "PATH")))
			  (setenv "SBCL_HOME" SBCL_BASE)
			  (setq SBCL-IN-PATH t))
		       `(`sbcl  (,(concat SBCL_BASE "/" "sbcl.exe")
				"--noinform"))))))
 )
 #+END_SRC

** Provions binary SBCL 2.0.2
 This is assumed to be broken.
 #+BEGIN_SRC emacs-lisp :tangle no
 (defmacro binary-compiled-sbcl-2-0-2()
 (when (boundp 'SBCL_BASE) 
          (cond  
		    ((string= SBCL_BASE "C:/devel/SBCL_2_0_2")
		     (progn
		       (unless (boundp 'SBCL-IN-PATH)
			 (setenv "PATH"
				 (concat
				  SBCL_BASE
				  "/bin/"
				  ";"
				  (getenv "PATH")))
			 (setenv "SBCL_HOME"
				 (concat
				  SBCL_BASE
				  "/lib/sbcl"))
			 (setq SBCL-IN-PATH t))
		       `(sbcl  (,(concat SBCL_BASE "/bin/" "sbcl.exe")
				"--noinform"))))
		    ((string= SBCL_BASE "C:/devel/SBCL_2_0_0-bin")
		     (progn
		       (unless (boundp 'SBCL-IN-PATH)
			 (setenv "PATH"
				 (concat
				  SBCL_BASE
				  "/bin/"
				  ";"
				  (getenv "PATH")))
			  (setenv "SBCL_HOME" SBCL_BASE)
			  (setq SBCL-IN-PATH t))
		       `(`sbcl  (,(concat SBCL_BASE "/" "sbcl.exe")
				"--noinform"))))))
 )
 #+END_SRC

** Provision ABCL
 #+BEGIN_SRC emacs-lisp
 (defmacro provision-abcl()
   `(when (and (file-exists-p  (convert-standard-filename "C:/Program Files/ABCL/abcl.jar")))
	 `(abcl  ("java" "-jar" ,(convert-standard-filename "C:/Program Files/ABCL/abcl.jar")))))
 #+END_SRC

* SLIME
  - There are a number of defunct implemnations in this list:
    - SBCL_2_0_@
    - SBCL_2_0_0-bin
    - Both clisp need review.
  - Refactor
    - each entry in the slime-lisp-implemenation should be:
      - ,(provision-user-compiled-mingw)
      - if that privision returns nil there is no entry.
#+BEGIN_SRC emacs-lisp
  (setq slime-lisp-implementations
	`(,(user-compiled-mingw64-sbcl)
          ,(provision-abcl)
;	  ,(binary-supplied-sbcl-2-0-0)
;	  ,(binary-compiled-sbcl-2-0-2)
	,(when (and (eq system-type 'winodows-nt))
	   `(clisp-win ("clisp" "-K" "full" "-I")))
	,(when (and (eq system-type 'cygwin) (file-exists-p (convert-standard-filename "/usr/bin/clisp")))
	    `(clisp-cyg (,(convert-standard-filename "/usr/bin/clisp" ))))))
#+END_SRC

* Common Lisp HyperSpec
I use my local clone of the Hyperspec
#+BEGIN_SRC emacs-lisp
(setq common-lisp-hyperspec-root (convert-standard-filename (getenv "HyperSpec")))
#+END_SRC

* Option  for SLIME
#+BEGIN_SRC emacs-lisp
(setq slime-contribs '(slime-fancy))
(global-set-key "\C-cs" 'slime-selector)
#+END_SRC

* Slime Autocomplete
#+BEGIN_SRC emacs-lisp
(require 'ac-slime)
(add-hook 'slime-mode-hook 'set-up-slime-ac)
(add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'slime-repl-mode))
#+END_SRC

* Paredit mode
#+BEGIN_SRC emacs-lisp
(add-hook 'lisp-mode-hook #'paredit-mode)
#+END_SRC

* Auto complete mode for LISP
#+BEGIN_SRC emacs-lisp
(add-hook 'lisp-mode-hook #'auto-complete-mode)
#+END_SRC

* Enable lisp-mode .lisp and .asd files
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (append '((".*\\.asd\\'" . lisp-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.cl\\'" . lisp-mode))
	      auto-mode-alist))
#+END_SRC

* Emacs Theme                                                        :review:
#+BEGIN_SRC emacs-lisp
(load-theme 'manoj-dark)
(set-face-attribute 'default nil :height 120)
#+END_SRC

* Rainbow Delimeters
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

* Pascal Setup                                                       :review:
#+BEGIN_SRC emacs-lisp
(add-hook 'pascal-mode-hook
	  (lambda ()
	    (set (make-local-variable 'compile-command)
		 (concat "fpc " (file-name-nondirectory (buffer-file-name)))
		 )
	    )
	  t)

(setq auto-mode-alist
      (append '((".*\\.pas\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.pp\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.yml\\'" . yaml-mode))
	      auto-mode-alist))
#+END_SRC

* Shells                                                             :review:
#+BEGIN_SRC emacs-lisp
(setq win-shell-implementaions
      `((cmd (shell))
	(ming64 (
		      (defun my-shell-setup ()
       "For Cygwin bash under Emacs 20"
       (setq comint-scroll-show-maximum-output 'this)
       (make-variable-buffer-local 'comint-completion-addsuffix))
       (setq comint-completion-addsuffix t)
       ;; (setq comint-process-echoes t) ;; reported that this is no longer needed
       (setq comint-eol-on-send t)
       (setq w32-quote-process-args ?\")
     
     (add-hook 'shell-mode-hook 'my-shell-setup)
		 ))))
	
(defun win-shell ())
  
;; The MSYS-SHELL

(defun msys-shell () 
  (interactive)
  (let ((explicit-shell-file-name (convert-standard-filename "c:/devel/msys64/usr/bin/bash.exe"))
	(shell-file-name "bash")
	(explicit-bash.exe-args '("--noediting" "--login" "-i"))) 
    (setenv "SHELL" shell-file-name)
    (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
    (shell)))

;; The MINGW64-SHELL

(defun mingw64-shell () 
       (interactive)
       (let (( explicit-shell-file-name (convert-standard-filename  "c:/devel/msys64/mingw64/bin/bash.exe")))
	 (shell "*bash*")
	     (call-interactively 'shell))
       ;; (setq shell-file-name "bash")
       ;; (setq explicit-bash.exe-args '("--login" "-i")) 
       ;; (setenv "SHELL" shell-file-name)
       ;; (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
       ;; (shell)
       )
#+END_SRC

* Tramp                                                              :review:
#+BEGIN_SRC emacs-lisp
(require 'tramp)
;(setq tramp-default-method "plink")
(setq tramp-verbose 10)
#+END_SRC

* IDO                                                                :review:
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
#+END_SRC

* Indent                                                             :review:
  - Leftover from  parsing experiment???
#+BEGIN_SRC emacs-lisp
(put 'if 'lisp-indent-function nil)
(put 'when 'lisp-indent-function 1)
(put 'unless 'lisp-indent-function 1)
(put 'do 'lisp-indent-function 2)
(put 'do* 'lisp-indent-function 2)
#+END_SRC

* Magit                                                              :review:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

* Printing                                                           :review:
#+BEGIN_SRC emacs-lisp :tangle no
(setq printer-name "lpr://192.168.1.39")
#+END_SRC

* Ord Mode Customizations
** site-lisp  and org-checklist.el
   - https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Search.html
   - I want add org-checklist.el so I will add it to site-lisp
   - "/usr/local/share/emacs/site-lisp" per manual where
     - replace /usr/local with the installation prefix appropriate for your Emacs.
     - Current value: file:\\C:\ProgramData\chocolatey\lib\Emacs\tools
#+BEGIN_SRC emacs-lisp
;;; org-checklist.el location is in <emacs-install>/share/emacs/site-lisp/
#+END_SRC
** Org Key Binding
 #+BEGIN_SRC emacs-lisp
 ;;;; Org Mode key bindings.
 (global-set-key (kbd "C-c l") 'org-store-link)
 (global-set-key (kbd "C-c a") 'org-agenda)
 (global-set-key (kbd "C-c c") 'org-capture)
 (global-set-key (kbd "C-c b") 'org-switchb)
 #+END_SRC

** Configure BABEL languages
 #+BEGIN_SRC emacs-lisp
 (org-babel-do-load-languages
  'org-babel-load-languages
  '((lisp . t)
    (emacs-lisp . t)))
 #+END_SRC

** org modules needed
 #+BEGIN_SRC emacs-lisp
 (setq org-modules '(org-habit org-checklist))
 #+END_SRC

** Configure habit (do not remember why)
 #+BEGIN_SRC emacs-lisp
 (setq org-habit-graph-column 50)
 #+END_SRC

** Org link abbreviations
 #+BEGIN_SRC emacs-lisp
 (setq org-link-abbrev-alist
       '(("bugzilla" . "http://192.168.1.50/bugzilla/show_bug.cgi?id=")
	 ("bugzilla-comp" . "http://192.168.1.50/bugzilla/describecomponents.cgi?product=")))
 #+END_SRC
** Customize by Environemt
*** customization macros
#+BEGIN_SRC emacs-lisp
  (defmacro default-or-environment (emacs-var base new-path-string env-string) 
    `(setq ,emacs-var (if (getenv ,env-string)
                          (getenv ,env-string)
                          (concat ,base ,new-path-string))))
#+END_SRC

*** Ensure there are standard user ~/org directories
 How to define the standard HOME org directory.
 Under windows and linux this is ~/org 
  #+BEGIN_SRC emacs-lisp
  ;; The standard user directory is org  in the HOME directory.
  ;; This directory can be set by the environment var ORG-USER-DIR.
  (default-or-environment org-user-dir (getenv "HOME") "/org" "ORG-USER-DIR")
  (unless (file-directory-p org-user-dir)
    (make-directory  org-user-dir))
  ;; Define a global org directory
  (default-or-environment org-public-dir "c:/Users/Public/Documents" "/org" "ORG-PUBLIC-DIR")  
  #+END_SRC

*** Standard Notes file
 This is a standard per User notes file.
 Unser windows and linux this ~/org/notes/notes.org
  #+BEGIN_SRC emacs-lisp
  ;; The Standard org note file is ~/org/notes/notes.
  ;; This can be set by the environment variable ORG-NOTES-FILE
  (default-or-environment org-notes-file org-user-dir "/nodes/notes.org" "ORG-NOTES-FILE")
  (setq org-default-notes-file org-notes-file)
  #+END_SRC

*** Standard org and org-agenda directories
   - I have a common place for org and org agenda files
  #+BEGIN_SRC emacs-lisp
    ;; My org agenda dir are files in ~/org/agenda
    ;; The the agenda directory can be changed by env ORG-AGENDA-DIR
    (default-or-environment org-agenda-dir org-user-dir "/agenda/" "ORG_AGENDA-DIR")
    (default-or-environment org-public-agenda-dir org-public-dir "/agenda/" "ORG-PUBLIC-AGENDA-DIR")
  #+END_SRC

** A few custom checklists
 #+BEGIN_SRC emacs-lisp
 (defun morning-checklist-writer()
   (format "* Morning Checklist
   - [ ] Morning Tray for Mom [/]
     - [ ] Morning Medications
     - [ ] Breakfast
       - [ ] Cereal 4oz milk
     - [ ] 4oz water 1/2 TSP metamucil
     - [ ] Spoon
   - [ ] Feed Cat
   - [ ] Eat YOUR Breakfast
 " nil))

 (defun monthly-tasks-for-james-seese ()
   (format "* Monthly Tasks: James Seese
   - [ ] Process all inbound mail.
   - [ ] Separate mail by entity
   - [ ] list all oustanding bills
   - [ ] list all oustanding deposits
   - [ ] Make deposit list
     - [ ] vendor
     - [ ] amount
   - [ ] Make check list
     - [ ] Vendor
     - [ ] Amount
   - [ ] Write and mail checks" nil))
 #+END_SRC

** Task agenda context
 - This starts an agenda context
 #+BEGIN_SRC emacs-lisp
 (setq org-agenda-files  `(,org-agenda-dir ,org-public-agenda-dir))
 (setq org-agenda-skip-scheduled-if-done t)
 (setq org-agenda-todo-list-sublevels t)
 #+END_SRC
  - The following may be defined with the above values

** Capture Templates
 #+BEGIN_SRC emacs-lisp
    ;;; Define user and public template directories
     (default-or-environment org-template-dir org-user-dir "/template/" "ORG-TEMPLATE-DIR")
     (default-or-environment org-public-template-dir org-public-dir "/template/" "ORG-PUBLIC-TEMPLATE-DIR")

    ;; ;;; See: http://cachestocaches.com/2016/9/my-workflow-org-agenda/
    (setq org-capture-templates
     `(("n" "note" entry (file ,(concat org-public-agenda-dir  "gtd.org"))
	"* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
    ;; Medical Appointments
    ;; Medical Appointment  (m) Medical template
       ("m" "MEDICAL   (m) Medical" entry (file+headline ,(concat org-public-agenda-dir "gtd.org") "Medical Appointments")
	(file ,(concat org-public-template-dir "Medical-Appointment.txt")) :empty-lines 1 :time-prompt t)

    ;; Health Data Capture
       ("h" "Health Data Capture (h)")

       ("hb" "Blood Pressure (b)" table-line (file+headline ,(concat org-public-dir "/notes/Medical-Data.org") "Blood Pressure")
	 "|%^{Person|TOM|JOANNE|SONYA}|%U|%^{Systtolic}|%^{Diastolic}|%^{Pulse}|")

       ("ht" "Temperature (t)" table-line (file+headline ,(concat org-public-dir "/notes/Medical-Data.org") "Temperature")
	"|%^{Person|TOM|JOANNE|SONYA}|%U|%^{Temperature}|")
    ;; Shoppping Items
       ("s" "Shopping Request (s)" table-line (file+headline ,(concat org-public-dir "/notes/Shopping-Requests.org") "Requests")
	"|%U|%^{Needed Item}|")
    ;; List of Goals
       ("g" "Set a goal (g)")
       ("gd" "Daily Goal TODO (d)"  entry (file+headline ,(concat org-public-agenda-dir "gtd.org") "Daily Goals")
	 "*** TODO [#C] %^{Description}
	 SCHEDULED: %t")
       ("gw" "Weekly Goal TODO (w)"  entry (file+headline ,(concat org-public-agenda-dir "gtd.org") "Weekly Goals")
	 "*** TODO [#C] %^{Description}
	 SCHEDULED: %t")
       ("j" "Journal" entry (file+datetree ,(concat org-user-dir "/diary.org"))
	"* %U %^{Title}\n  -%?" :clock-in t :clock-resume t)
   ;; Oil measurements
       ("o" "Oil Level Mointor (o)")

       ("oe" "Extension Tank (e)")
       ("oel" "Oil Level in the Extention Tank (l)"  table-line 
	 (file+headline ,(concat org-public-dir "/notes/Heat-Data.org") "Extension")
	"|%U|%^{Oil Clock}|%^{Remote}|%^{Tank Guage}|" )
       ("oef" "Oil Fill in the Extention Tank (f)"  table-line 
	 (file+headline ,(concat org-public-dir "/notes/Heat-Data.org") "Extension Fill")
	"|%U|%^{Gallons}|")
       ("oed" "Oil Empty in the Extention Tank (d)"  table-line 
	 (file+headline ,(concat org-public-dir "/notes/Heat-Data.org") "Extension Empty")
	"|%U|")


       ("om" "Main Tank (m)")
       ("oml" "Oil Level in the Main Tank (l)"  table-line (file+headline ,(concat org-public-dir "/notes/Heat-Data.org") "Main")
	"|%U|%^{Tank Guage}|")
       ("omf" "Oil Fill in the Extention Tank (f)"  table-line 
	 (file+headline ,(concat org-public-dir "/notes/Heat-Data.org") "Main Fill")
	"|%U|%^{Gallons}|")
       ("omd" "Oil Empty in the Extention Tank (d)"  table-line 
	 (file+headline ,(concat org-public-dir "/notes/Heat-Data.org") "Main Empty")
	"|%U|")

	))
 #+END_SRC

** Refile configuration
 #+BEGIN_SRC emacs-lisp
 (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
 #+END_SRC

** Always present the gtd.org file
Customize  this default by environment variable USER_REOPEN_FILES
 #+BEGIN_SRC emacs-lisp
 (find-file (concat org-public-agenda-dir "gtd.org"))
 #+END_SRC


* Final Presenation to the user.

** My default coding location
Customize this default by envrinment variable USER_PROJECTS.
 #+BEGIN_SRC emacs-lisp
 ;;;; Change to my work directory
 (if (getenv "CODE-REPO")
      (cd (getenv "CODE-REPO")))
  #+END_SRC
** load per user settings
 #+BEGIN_SRC emacs-lisp
 ;;;; load per user settings file
 ;;;; finding local  init directory from https://emacs.stackexchange.com/questions/52434/how-to-access-the-directory-of-the-init-el-file-from-elisp
 (message "local settings start")
 (when (file-exists-p (concat (file-name-directory (or load-file-name (buffer-file-name))) "/local-settings.org"))
         (print "Starting to load")
         (org-babel-load-file (expand-file-name "local-settings.org" (file-name-directory (or load-file-name (buffer-file-name))))))
 (message "local settings end")
 #+END_SRC

* Report the time metrics
#+BEGIN_SRC emacs-lisp
(setq *emacs-load-end* (current-time))
(message "Time for .emacs downloading: %s loading %s " 
(float-time (time-subtract *emacs-load-end* *emacs-download*))
(float-time (time-subtract *emacs-download* *emacs-load-start*)))
#+END_SRC

