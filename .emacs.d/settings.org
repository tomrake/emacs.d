
#+STARTUP: overview
#+EXPORT-FILENAME init.el
* README
** TODO Integrate emacs-custom.el
** Next Stage
*** DONE Make gtd/newgtd.org the main agenda file
*** DONE Ensure Capture updates new-gtd.org
*** DONE Add Journal and Journal Capture
    - This still needs a little fixup/customization see the Journal entries.
*** DONE Ensure correct refile targets.
*** DONE Ensure Task Capture
*** DONE Prepare custom agenda views [2/2]
    - [X] Begining of the Day - H
    - [X] Daily Action List - D
*** TODO Consider adding issue/error tracking in emacs [/]
     - [ ] Reseach error issue tracking in org-mode/emacs
     - [ ] Next create action plan or defer
*** TODO Review and fix column view data [/]
    - [ ] Find recommened COLUMNS line
    - [ ] Hunt down COLUMN items in :PROPERTIES: drawers.
    - [ ] Fix Font size issue
      - Column view screws up the font sizing.
*** TODO Consider the .emacs-custom.el as a defect [/]
    This is likely the core of the Column mode font size problem.
    I suspect this is a theme related issue.
    To debug that I need to version .emacs-custom.el so it should be integrated into settings.org.
    Or else there will by sync problems.
    - [ ] Plan how to correct the defect 
*** TODO Create Stub base data files
** Task-Agenda Modifications
I have too many tasks for my agenda.
I need to evaluation the common public agenda strategy I developed.
The Task-Agenda flow concentrates the agenda view to short term tasks,
items that can be done in a day.
Longer term items are projects which are reviewed on a weekly basis.
A task can be created without a project.

Idea that are neither tasks or projects are created as dream items are are reviews on a monthly basis.
This makes agenda items only sub day items.

How should the public/per user be changed to just per user.
The current agenda items should be placed in legacy.

Essential to this process is mastering refile.

The tutorial refers to remember mode which is largely superceeded by org capture.


** Standard LISP setup

quicklisp is installed at ~/quicklisp


The base configuration searches for systems in the following directories:
   - ~/common-lisp/
   - ~/quicklisp/local-packages/
   - c:/Users/Public/Documents/repos/

~/.quicklisp-user.lisp 
Is a straight common lisp file used to add the above directories for then system
The base configuration is done for all users except for user zzzap, which has a special legacy configuration.

~/.config/common-lisp/source-registry.conf.d contains equivalent search directories

NONSTANDARD legacy behaviour in zzzap

zzzap has a non-standard/legacy quicklisp setup.lisp location of ~/local-code-projects/my-code/common-lisp/setup.lisp

The Best solution would to convert and test all legacy code in the standard locations.

*** Mitigration Strategy for zzzap

1. Make effort to find hard coded User/zzzap/ strings in lisp code.
2. Do fixup of those strings test and certify  code
3. Create ~/quickisp ~/common-lisp distro for zzzzp 
4. mv selected items from legacy locations to new locations.

** READ NOTES MESSAGE
#+BEGIN_SRC emacs-lisp
;;;; See the README in ~/emacs.d/settings.org has documentation on emacs, common-lisp setup.
#+END_SRC
** Each User has a role
I have different roles on my PC. And each role had different sharing requirements.
Each role has different setup files.
Each role is represented by a specific user on my PC.

** The public user is a common shared user
Shared configuration across many user is done by files in the public user.
These files are referenced by each user configuration file, see the org configuration in this file for en example.
The Public user contains a copy of the primary template for emacs settings in a git repo.

** How SBCL user customization is handled
I generally use SBCL and I use quicklisp.

The following is by main .sbclrc file which is a per user file.

#+BEGIN_SRC lisp
;;;;          -*-  mode: lisp;  -*-

;;; The following lines added by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init (merge-pathnames
                       "local-code-projects/my-code/common-lisp/setup.lisp"
                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init))
  (print "loading Quicklisp"))
  
;;; Standard site directoires Thomas Rake
#+quicklisp
(let* ((user (first (last (pathname-directory (user-homedir-pathname)))))
       (shared-code #+win32 #P"C:/Users/Public/Documents/repos/") ; could add unix defaults
       (standard-lisp-home #+win32 (pathname (concatenate 'string "C:/Users/" user "/common-lisp/"))) ; count add unix defaults
       (paths))
;;;; Create path defaults based on the user
  (cond ((equalp user "zzzap")
	 (setf paths `(#P"C:/Users/zzzap/local-code-projects/my-code/common-lisp/local-attic/" ; very old code
		       ,standard-lisp-home
		       ,shared-code)))
        (t `(,standard-lisp-home ,shared-code)))
;;;; Add those paths that exist to quicklisp project directories.
  (dolist (p paths)
    (when (and p (probe-file p) (not (member p ql:*local-project-directories*)))
      (print (format t "Adding ~A to quicklisp local projects directory." p))
      (setf ql:*local-project-directories* (cons p ql:*local-project-directories*)))))
#+END_SRC

The variable path could be constructed based on the user executiong the .sbclrc file. This would make
the .sbclrc file universal.

** WIP Stash of resources
https://dev.to/fedekau/automatically-managing-personal-and-work-git-configurations-27ad
https://www.wyeworks.com/blog/2018/01/03/using-git-hooks-to-improve-your-day-to-day-workflow/

* Generated File Warning
Add a warning to init.el that it is
#+BEGIN_SRC emacs-lisp
;;;; This file had been generated from settings.org
#+END_SRC

* Debug On Error

Enable debugging.

#+BEGIN_SRC emacs-lisp
;(setq debug-on-error t)
#+END_SRC

* Load time metrics
Mark the begining time of execution of init.el so we can compare and report
at the end.
#+BEGIN_SRC emacs-lisp
;; load time metrics
(setq  *emacs-load-start* (current-time))
#+END_SRC

* Initial Frame Size
Fix initial window position.
  #+BEGIN_SRC emacs-lisp
  ;; Set initial frame size and position
  (defun my/set-initial-frame ()
    (let* ((base-factor 0.70)
          (a-width (* (display-pixel-width) base-factor))
          (a-height (* (display-pixel-height) base-factor))
          (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
          (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
      (set-frame-position (selected-frame) a-left a-top)
      (set-frame-size (selected-frame) (truncate a-width)  (truncate a-height) t)))
  (setq frame-resize-pixelwise t)
  (my/set-initial-frame)
  #+END_SRC

* Package Archives distros                                           :review:
Which online distros we use to get packages.
Much of this is legacy code and needs review.
#+BEGIN_SRC emacs-lisp
  (setq package-check-signature nil)
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("elpa" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives
	       '("org" . "https://orgmode.org/elpa/"))
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
#+END_SRC
* Load use-package
#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

* Initialize uss-package
  [TBD]

* Download Timing
This download timing mechanism is likely deprecated also.
#+BEGIN_SRC emacs-lisp
(setq *emacs-download* (current-time))
#+END_SRC

* Basic Look and feel
I don't like the a messy startup screen.

 #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-screen t)
   (setq visible-bell 1)
   ;;(load-theme 'vs-dark-theme)

 #+END_SRC
* Magit                                                              :review:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
* Fix Windows 10 cursor problem
 #+BEGIN_SRC emacs-lisp
 (setq w32-use-visible-system-caret nil)
 #+END_SRC

* Crossplatform filename
Attempt specifiy filepaths in a cross platform way.

Another strategy would be specify classes of base paths in one place and
specify specific crossplatform functions and macros for path construction.
#+BEGIN_SRC emacs-lisp
(fset 'convert-windows-filename
      (if (fboundp 'cygwin-convert-file-name-from-windows)
	  'cygwin-convert-file-name-from-windows
	  'convert-standard-filename))
#+END_SRC

* Copy Filename to Buffer
#+BEGIN_SRC emacs-lisp
(defun my-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
#+END_SRC
* Save the emacs customization to a file.
These are settings from the Emacs Customization Mechanism.
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.config/emacs/.emacs-custom.el")
(load custom-file)
#+END_SRC

* MSYS2/MINGW64 Path elements
Mingw requires careful crafting of paths and emulation of mount points.
Any LISP built under mingw has an assumed environment of the build.

This needs a basic provision code to use various compiled lisps.
#+BEGIN_SRC emacs-lisp
  ;;; Add mingw path elements to exec path
  (let ((mingw64-root-mount "C:/devel/msys64")
	(mingw64-bin-mount "C:/devel/msys64/usr/bin"))

  (add-to-list 'exec-path (concat mingw64-root-mount "/mingw64/bin"))
  (add-to-list 'exec-path (concat mingw64-root-mount "/usr/local/bin"))
  (add-to-list 'exec-path (concat mingw64-root-mount "/usr/bin"))
  (add-to-list 'exec-path mingw64-bin-mount))
  (setq +msys64-base-path+ "C:/devel/msys64/")

  (defun msys64-file-exists-p (file)
    (file-exists-p (concat +msys64-base-path+ file)))

#+END_SRC
* Bash and Launching under Bash
#+BEGIN_SRC emacs-lisp
  (defun start-under-bash-login-shell (exec-path)
    `(,(concat +msys64-base-path+ "usr/bin/env.exe") "MSYSTEM=MINGW64"
      ,(concat +msys64-base-path+ "usr/bin/bash.exe") "-l" "-c" ,exec-path))

  (defun lisp-mingw64-implementation (tag mingw64-exec-path)
    "Create a slime implemenation in the local mingw64 system naned tag and executeable of mingw64-exec-path."
    `(,tag (,(concat +msys64-base-path+ "usr/bin/env.exe") "MSYSTEM=MINGW64"
	    ,(concat +msys64-base-path+ "usr/bin/bash.exe") "-l" "-c" ,(concat mingw64-exec-path " --noinform"))))
  ;;;  Now rebuild path environment variable based on exec-path
  (setenv "PATH" (mapconcat #'identity exec-path path-separator))
#+END_SRC

  (setq  ispell-program-name "aspell")
  (setq  ispell-dictionary-alist '((master . en_US)))
  (require 'ispell)
* Setup SBCL
This is where I keep my quirky self compiled SBCL compiled under msys2
#+BEGIN_SRC emacs-lisp
(setq SBCL_HOME_SAVE (getenv "SBCL_HOME"))
(setq SBCL_BASE "C:/devel/SBCL_2_0_0-bin")
#+END_SRC

* Configure Autocomplete
Need to consider using HELM here
#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC

* Copy OS PATH to emacs path
This seems unused.
#+BEGIN_SRC emacs-lisp
(setq PATH_SAVE (getenv "PATH"))
#+END_SRC

* Provision Various Common LISPs

** Provision user compiled SBCL
 #+BEGIN_SRC emacs-lisp
 (defun user-compiled-mingw64-sbcl (path)
   `(when  (file-exists-p (concat +msys64-base-path+ ,path))
       (lisp-mingw64-implementation 'mingw64-sbcl ,path)))
 #+END_SRC

** Provions binary SBCL 2.0.0
 This is assumed to be broken.
 #+BEGIN_SRC emacs-lisp :tangle no
 (defmacro binary-supplied-sbcl-2-0-0 ()
   (when (boundp 'SBCL_BASE) 
	      (cond  
		   
		    ((string= SBCL_BASE "C:/devel/SBCL_2_0_0-bin")
		     (progn
		       (unless (boundp 'SBCL-IN-PATH)
			 (setenv "PATH"
				 (concat
				  SBCL_BASE
				  "/bin/"
				  ";"
				  (getenv "PATH")))
			  (setenv "SBCL_HOME" SBCL_BASE)
			  (setq SBCL-IN-PATH t))
		       `(`sbcl  (,(concat SBCL_BASE "/" "sbcl.exe")
				"--noinform"))))))
 )
 #+END_SRC

** Provions binary SBCL 2.0.2
 This is assumed to be broken.
 #+BEGIN_SRC emacs-lisp :tangle no
 (defmacro binary-compiled-sbcl-2-0-2()
 (when (boundp 'SBCL_BASE) 
          (cond  
		    ((string= SBCL_BASE "C:/devel/SBCL_2_0_2")
		     (progn
		       (unless (boundp 'SBCL-IN-PATH)
			 (setenv "PATH"
				 (concat
				  SBCL_BASE
				  "/bin/"
				  ";"
				  (getenv "PATH")))
			 (setenv "SBCL_HOME"
				 (concat
				  SBCL_BASE
				  "/lib/sbcl"))
			 (setq SBCL-IN-PATH t))
		       `(sbcl  (,(concat SBCL_BASE "/bin/" "sbcl.exe")
				"--noinform"))))
		    ((string= SBCL_BASE "C:/devel/SBCL_2_0_0-bin")
		     (progn
		       (unless (boundp 'SBCL-IN-PATH)
			 (setenv "PATH"
				 (concat
				  SBCL_BASE
				  "/bin/"
				  ";"
				  (getenv "PATH")))
			  (setenv "SBCL_HOME" SBCL_BASE)
			  (setq SBCL-IN-PATH t))
		       `(`sbcl  (,(concat SBCL_BASE "/" "sbcl.exe")
				"--noinform"))))))
 )
 #+END_SRC

** Provision ABCL
 #+BEGIN_SRC emacs-lisp
 (defmacro provision-abcl()
   `(when (and (file-exists-p  (convert-standard-filename "C:/Program Files/ABCL/abcl.jar")))
	 `(abcl  ("java" "-jar" ,(convert-standard-filename "C:/Program Files/ABCL/abcl.jar")))))
 #+END_SRC
** Provision CCL
   #+BEGIN_SRC emacs-lisp
     (defun provision-ccl ()
       (let ((ccl "C:/Users/zzzap/quicklisp/local-projects/ccl/wx86cl64.exe"))
         (when (file-exists-p ccl)
           `(ccl-64 (,ccl)))))
   #+END_SRC

* SLIME
  - There are a number of defunct implemnations in this list:
    - SBCL_2_0_@
    - SBCL_2_0_0-bin
    - Both clisp need review.
  - Refactor
    - each entry in the slime-lisp-implemenation should be:
      - ,(provision-user-compiled-mingw)
      - if that privision returns nil there is no entry.
#+BEGIN_SRC emacs-lisp
    (defun conditional-msys2-slime-implementation (tag exec-path )
      (when (msys64-file-exists-p exec-path)
       `(,tag ,(start-under-bash-login-shell (concat exec-path " --noinform")))))

    (setq slime-lisp-implementations
	  `(,(conditional-msys2-slime-implementation 'user-compiled-mingw64-sbcl "/usr/local/bin/sbcl.exe")
	    ,(provision-abcl)
	    ,(provision-ccl)

  ;	  ,(binary-supplied-sbcl-2-0-0)
  ;	  ,(binary-compiled-sbcl-2-0-2)
	  ,(when (and (eq system-type 'winodows-nt))
	     `(clisp-win ("clisp" "-K" "full" "-I")))
	  ,(when (and (eq system-type 'cygwin) (file-exists-p (convert-standard-filename "/usr/bin/clisp")))
	      `(clisp-cyg (,(convert-standard-filename "/usr/bin/clisp" ))))))
#+END_SRC

* Common Lisp HyperSpec
I use my local clone of the Hyperspec
#+BEGIN_SRC emacs-lisp
(setq common-lisp-hyperspec-root (convert-standard-filename (getenv "HyperSpec")))
#+END_SRC

* Option  for SLIME
#+BEGIN_SRC emacs-lisp
(setq slime-contribs '(slime-fancy))
(global-set-key "\C-cs" 'slime-selector)
#+END_SRC

* Slime Autocomplete
#+BEGIN_SRC emacs-lisp
(require 'ac-slime)
(add-hook 'slime-mode-hook 'set-up-slime-ac)
(add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'slime-repl-mode))
#+END_SRC

* Paredit mode
#+BEGIN_SRC emacs-lisp
(add-hook 'lisp-mode-hook #'paredit-mode)
#+END_SRC

* Auto complete mode for LISP
#+BEGIN_SRC emacs-lisp
(add-hook 'lisp-mode-hook #'auto-complete-mode)
#+END_SRC

* Enable lisp-mode .lisp and .asd files
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (append '((".*\\.asd\\'" . lisp-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.cl\\'" . lisp-mode))
	      auto-mode-alist))
#+END_SRC

* Emacs Theme                                                        :review:
#+BEGIN_SRC emacs-lisp
(load-theme 'manoj-dark)
(set-face-attribute 'default nil :height 120)
#+END_SRC

* Rainbow Delimeters
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  ;(font-lock-comment-face ((t (:italic t :slant oblique :foreground "#9fd385"))))
  ;; (setf rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
  ;; (setf rainbow-delimiters-depth-2-face ((t (:foreground "deep pink"))))
  ;; (setf rainbow-delimiters-depth-3-face ((t (:foreground "chartreuse"))))
  ;; (setf rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
  ;; (setf rainbow-delimiters-depth-5-face ((t (:foreground "yellow"))))
  ;; (setf rainbow-delimiters-depth-6-face ((t (:foreground "orchid"))))
  ;; (setf rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
  ;; (setf rainbow-delimiters-depth-8-face ((t (:foreground "sienna1"))))
#+END_SRC

* Pascal Setup                                                       :review:
#+BEGIN_SRC emacs-lisp
(add-hook 'pascal-mode-hook
	  (lambda ()
	    (set (make-local-variable 'compile-command)
		 (concat "fpc " (file-name-nondirectory (buffer-file-name)))))
	  t)

(setq auto-mode-alist
      (append '((".*\\.pas\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.pp\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.yml\\'" . yaml-mode))
	      auto-mode-alist))
#+END_SRC

* Shells                                                             :review:
  I am attempting to use the friendly-shell infrastructure.

  shell/git-bash works but has prompt problems.
#+BEGIN_SRC emacs-lisp
      (use-package friendly-shell
	:ensure t
	:config   
	  (defun shell/git-bash (&optional path)
	     (interactive)
	     (friendly-shell :path path
			     :interpreter "C:/Program Files/Git/bin/bash.exe"
			     ;;:interpreter-args '("-l")
			     )))


      (use-package friendly-remote-shell
	:ensure t
	:config
	   (defun shell/cisco (&optional path)
	     (interactive)
	     (with-shell-interpreter-connection-local-vars
	       (friendly-remote-shell :path path))))



	  ;; (setq win-shell-implementaions
		    ;;       `((cmd (shell))
		    ;; 	(ming64 ((defun my-shell-setup ()
		    ;;        "For Cygwin bash under Emacs 20"

		    ;;          (setq comint-scroll-show-maximum-output 'this)
		    ;;          (make-variable-buffer-local 'comint-completion-addsuffix))
		    ;;            (setq comint-completion-addsuffix t)
		    ;;            ;; (setq comint-process-echoes t) ;; reported that this is no longer needed
		    ;;            (setq comint-eol-on-send t)
		    ;;            (setq w32-quote-process-args ?\")
		    ;;            (add-hook 'shell-mode-hook 'my-shell-setup)))))

		    ;; (defun win-shell ())

		    ;; ;;; The MSYS-SHELL

		    ;; (defun msys-shell () 
		    ;;   (interactive)
		    ;;   (let ((explicit-shell-file-name (convert-standard-filename "c:/devel/msys64/usr/bin/bash.exe"))
		    ;; 	(shell-file-name "bash")
		    ;; 	(explicit-bash.exe-args '("--noediting" "--login" "-i"))) 
		    ;;     (setenv "SHELL" shell-file-name)
		    ;;     (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
		    ;;     (shell)))

		    ;; ;;; The MINGW64-SHELL

		    ;; (defun mingw64-shell () 
		    ;;        (interactive)
		    ;;        (let (( explicit-shell-file-name (convert-standard-filename  "c:/devel/msys64/mingw64/bin/bash.exe")))
		    ;; 	 (shell "*bash*")
		    ;; 	     (call-interactively 'shell)))
#+END_SRC
** Add shell extensions
#+BEGIN_SRC emacs-lisp
(use-package shx
  :ensure t)
#+END_SRC
* Tramp                                                              :review:
** The default connection method is plink
#+BEGIN_SRC emacs-lisp
(require 'tramp)
(setq tramp-default-method "plink")
;(setq tramp-verbose 10)
#+END_SRC
** Remote shell to cisco
#+BEGIN_SRC emacs-lisp
(defun cisco-remote-shell ()
  (interactive)
  (let ((default-directory "/plink:osmc@192.168.1.43:~"))
     (shell)))
#+END_SRC
* IDO                                                                :review:
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
#+END_SRC

* Indent                                                             :review:
  - Leftover from  parsing experiment???
#+BEGIN_SRC emacs-lisp
(put 'if 'lisp-indent-function nil)
(put 'when 'lisp-indent-function 1)
(put 'unless 'lisp-indent-function 1)
(put 'do 'lisp-indent-function 2)
(put 'do* 'lisp-indent-function 2)
#+END_SRC

* Printing                                                           :review:
#+BEGIN_SRC emacs-lisp :tangle no
(setq printer-name "lpr://192.168.1.39")
#+END_SRC

* Ord Mode Customizations
The newest redesign of org mode gtd is to use a per user setup with no public shared data.
All the newest stuff will be in ~/org/gtd/
** org mode location
#+BEGIN_SRC emacs-lisp
(setf org-mode-base-dir "~/org/")
#+END_SRC
** gtd location
#+BEGIN_SRC emacs-lisp
(setf org-gtd-dir (concat org-mode-base-dir "gtd/"))
#+END_SRC
** site-lisp  and org-checklist.el
   - https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Search.html
   - I want add org-checklist.el so I will add it to site-lisp
   - "/usr/local/share/emacs/site-lisp" per manual where
     - replace /usr/local with the installation prefix appropriate for your Emacs.
     - Current value: file:\\C:\ProgramData\chocolatey\lib\Emacs\tools
#+BEGIN_SRC emacs-lisp
;;; org-checklist.el location is in <emacs-install>/share/emacs/site-lisp/
#+END_SRC
** Org Key Binding
 #+BEGIN_SRC emacs-lisp
 ;;;; Org Mode key bindings.
 (global-set-key (kbd "C-c l") 'org-store-link)
 (global-set-key (kbd "C-c a") 'org-agenda)
 (global-set-key (kbd "C-c c") 'org-capture)
 (global-set-key (kbd "C-c b") 'org-switchb)
 #+END_SRC

** Configure BABEL languages
 #+BEGIN_SRC emacs-lisp
 (org-babel-do-load-languages
  'org-babel-load-languages
  '((lisp . t)
    (emacs-lisp . t)))
 #+END_SRC

** org modules needed
 #+BEGIN_SRC emacs-lisp
 (setq org-modules '(org-habit org-checklist))
 #+END_SRC

** Configure habit (do not remember why)
 #+BEGIN_SRC emacs-lisp
 (setq org-habit-graph-column 50)
 #+END_SRC

** Org link abbreviations
 #+BEGIN_SRC emacs-lisp
 (setq org-link-abbrev-alist
       '(("bugzilla" . "http://192.168.1.50/bugzilla/show_bug.cgi?id=")
	 ("bugzilla-comp" . "http://192.168.1.50/bugzilla/describecomponents.cgi?product=")))
 #+END_SRC
** Customize by Environemt
*** customization macros
#+BEGIN_SRC emacs-lisp
  ;;; Specify a emacs variable from an environment variable env-string or  base,new-path-string
  (defmacro default-or-environment (emacs-var base new-path-string env-string) 
    `(setq ,emacs-var (if (getenv ,env-string)
                          (getenv ,env-string)
                          (concat ,base ,new-path-string))))
#+END_SRC

*** Ensure there are standard user ~/org directories
 How to define the standard HOME org directory.
 Under windows and linux this is ~/org.
 
  #+BEGIN_SRC emacs-lisp
  ;; Create stadard org directories if not already present.
  ;; The standard user directory is ~/org in the HOME directory.
  ;; Override with the var ORG-USER-DIR.
  ;; The org-public-dir is a legacy model for shared tasks across all users.
  ;; The public shared model is to be deprecated in the light of the task-agenda model.
  (default-or-environment org-user-dir (getenv "HOME") "/org" "ORG-USER-DIR")
  (unless (file-directory-p org-user-dir)
    (make-directory  org-user-dir))
  ;; Define a global org directory
  (default-or-environment org-public-dir "c:/Users/Public/Documents" "/org" "ORG-PUBLIC-DIR")
  #+END_SRC

*** Standard Notes file
 This is a standard per User notes file.
 Unser windows and linux this ~/org/notes/notes.org
  #+BEGIN_SRC emacs-lisp
  ;; The Standard org note file is ~/org/notes/notes.
  ;; This can be set by the environment variable ORG-NOTES-FILE
  (default-or-environment org-notes-file org-user-dir "/nodes/notes.org" "ORG-NOTES-FILE")
  (setq org-default-notes-file org-notes-file)
  #+END_SRC



** Task agenda context
 - This starts an agenda context
 #+BEGIN_SRC emacs-lisp
   (setq org-agenda-files (list (concat org-gtd-dir "new-gtd.org")))
   (setq org-agenda-skip-scheduled-if-done t)
   (setq org-agenda-todo-list-sublevels t)
   ;;; Define Custom Agenda views
   (setq org-agenda-custom-commands
     `(("H" "All Contexts"
	 ((agenda)
	  (tags-todo "ATTIC")
	  (tags-todo "HOME")
	  (tags-todo "COMPUTER")
	  (tags-todo "MOBILE")
	  (tags-todo "OUTSIDE")
	  (tags-todo "PROJECT")
	  (tags-todo "FINANCIAL")))


       ("D" "Daily Action List"
	 ((agenda "" ((org-agenda-ndays 1)
		      (org-agenda-sorting-strategy
			`((agenda time-up priority-down tag-up)))
		      (org-deadline-waring-days 0)))))))
       
 #+END_SRC
  - The following may be defined with the above values

** Capture Templates
 #+BEGIN_SRC emacs-lisp
   ;;; Define ord-gtd template directories
    (default-or-environment gtd-template-dir org-gtd-dir "/template/" "ORG-TEMPLATE-DIR")

   ;; ;;; See: http://cachestocaches.com/2016/9/my-workflow-org-agenda/
   (setq org-capture-templates
    `(
   ;; Todo
      ("t" "Todo" entry (file+headline ,(concat org-gtd-dir "new-gtd.org") "Tasks")
       "* TODO %^{Brief Description} %^g\nAdded: %U")
   ;; Journal Capture
      ("j" "Journal" entry (file+datetree ,(concat org-gtd-dir "Journal.org") )
	 "* %?\nEntered on %U\n  %i\n  %a")
   ;; Medical Appointments
   ;; Medical Appointment  (m) Medical template
      ("m" "MEDICAL   (m) Medical" entry (file+headline ,(concat org-gtd-dir "new-gtd.org") "Medical Appointments")
       (file ,(concat gtd-template-dir "Medical-Appointment.txt")) :empty-lines 1 :time-prompt t)

   ;; Health Data Capture
      ("h" "Health Data Capture (h)")

      ("hb" "Blood Pressure (b)" table-line (file+headline ,(concat org-gtd-dir "Medical-Data.org") "Blood Pressure")
	"|%^{Person|TOM|JOANNE}|%U|%^{Systtolic}|%^{Diastolic}|%^{Pulse}|")

      ("ht" "Temperature (t)" table-line (file+headline ,(concat org-gtd-dir "Medical-Data.org") "Temperature")
       "|%^{Person|TOM|JOANNE}|%U|%^{Temperature}|")

      ("hw" "Weight (w)" table-line (file+headline ,(concat org-gtd-dir "Medical-Data.org") "Weight")
       "|%^{Person|TOM|JOANNE}|%U|%^{Weight}|")
   ;; Shoppping Items
      ("s" "Shopping Request (s)" table-line (file+headline ,(concat org-gtd-dir "Shopping-Requests.org") "Requests")
       "|%U|%^{Needed Item}|")


       ))
 #+END_SRC

   The FileHistory method of ba
** Refile configuration
 #+BEGIN_SRC emacs-lisp
 (setq org-refile-targets `( (,(concat org-gtd-dir "new-gtd.org") :maxlevel . 1)
                             (,(concat org-gtd-dir "Someday.org") :maxlevel . 2)))
 #+END_SRC

** Always present the new-gtd.org file
Customize  this default by environment variable USER_REOPEN_FILES
 #+BEGIN_SRC emacs-lisp
 (find-file (concat org-gtd-dir "new-gtd.org"))
 #+END_SRC
 
** Fix for cmdproxy
See https://emacs.stackexchange.com/questions/19037/org-babel-invoking-cmd-exe
#+BEGIN_SRC emacs-lisp
(require 'ob-shell)
(defadvice org-babel-sh-evaluate (around set-shell activate)
  "Add header argument :shcmd that determines the shell to be called."
  (defvar org-babel-sh-command)
  (let* ((org-babel-sh-command (or (cdr (assoc :shcmd params)) org-babel-sh-command)))
    ad-do-it
    ))
#+END_SRC
* Final Presenation to the user.

** load per user settings
 #+BEGIN_SRC emacs-lisp
 ;;;; load per user settings file
 ;;;; finding local  init directory from https://emacs.stackexchange.com/questions/52434/how-to-access-the-directory-of-the-init-el-file-from-elisp
 (message "local settings start")
 (when (file-exists-p (concat (file-name-directory (or load-file-name (buffer-file-name))) "/local-settings.org"))
         (print "Starting to load")
         (org-babel-load-file (expand-file-name "local-settings.org" (file-name-directory (or load-file-name (buffer-file-name))))))
 (message "local settings end")
 #+END_SRC

* Report the time metrics
#+BEGIN_SRC emacs-lisp
(setq *emacs-load-end* (current-time))
(message "Time for .emacs downloading: %s loading %s " 
(float-time (time-subtract *emacs-load-end* *emacs-download*))
(float-time (time-subtract *emacs-download* *emacs-load-start*)))
#+END_SRC

