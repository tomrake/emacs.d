#+STARTUP: overview
#+TITLE: Emacs configuration
#+OPTIONS: num:nil ^:nil
#+EXPORT-FILENAME: init.el
#+INDEX: Emacs!Configuration
* Report Debug START  :noexport:
#+BEGIN_SRC emacs-lisp
(message "Debug START")
#+END_SRC

* FRONT STUFF

** Documentation
*** Revision Narative

**** Phase 1
  I want to update to emacs 28.1. And in doing so I wish to convert my ad-hoc  package loading to use-package.

  I am revised much of the junk documenation and will set a version of the settings.org files.

  These are the configuration sources:
    - init.el this defers to settings.org>setting.el
    - local-capture.org
    - local-custom-agenda.org
    - local-publishing.org
    - local-settings.org
    - ~/.custom/emacs/emacs-custom.el

  The next process is do git check in all changes and reboot emacs.

  These were the difficulties in getting 28.1 to run.

  I needed to quote the EMACS_HOME enviroment variable becauce Program Fles has a space.

  I needed to do a special load and compile to get use-project the Ian Y E Pen solution.

  I needed to (use-package rainbow-delimiter :ensure t) to fetch that package.

  I needed to :tangle no the slime-helper part.

  Org gtd seems to be functional.
  
****  Phase 2
  This  phase  is planning to remove existing themes and  use Modus Themes and then customize them.
*** README
 [[file:~/.emacs.d/init.el]]
 [[file:~/.emacs.d/settings.el]]
 [[file:~/.emacs.d/settings.org]]
 [[file:~/.emacs.d/README.org]]
*** Standard coding setup
 - The source of Emacs startup code is largely controlled by .emacs/setting.org
 - All programming code is located in ~/quicklisp/local-projects/

* Begining setting generation.
* The generated file warning to init.el
#+BEGIN_SRC emacs-lisp
  ;;;; NOTE: This file had been generated from ~/.emacs.d/settings.org
  ;;;; Emacs customization is done in ~/.emacs.d/settings.org
  ;;;; ~/.emacs.d/init.el will load ~/.emacs.d/settings.el
  ;;;; ~/.emacs.d/settings.org is created and updated by *tangle* of code blocks from  settings.org
  (setq org-src-tab-acts-natively t)
  ()
#+END_SRC
* Server Start
#+BEGIN_SRC enacs-lisp
  (server-start)
#+END_SRC
* Magic Modes
#+BEGIN_SRC emacs-lisp
  (setq magic-mode-alist '(("*.org" . org)))
#+END_SRC
* The emacs customization file.
 Define were emacs cusomization is saved and restored.
 #+BEGIN_SRC emacs-lisp
    ;;;; emacs customization file
   (setq custom-file "~/.config/emacs/.emacs-custom.el")
   (load custom-file)
 #+END_SRC

* Allow loading of a file from .emacs.d/
 User custom setting from .emacs.d files.
#+BEGIN_SRC emacs-lisp
  ;;;; Macro to load user customizations from .emacs.d
  (defmacro local-custom-file (file description)
    `(progn
       (require 'org)
       (message (concat "Looking for " ,description " file: " ,file ))
       (let ((file-and-path (expand-file-name ,file user-emacs-directory)))
	 (if (file-exists-p file-and-path)
	     (progn (message (concat "org-babel-load of " file-and-path))
		    (org-babel-load-file file-and-path))
	   (message (concat "Custom file is missing " file-and-path))))))

#+END_SRC
* Emacs debug-on-error
   [TBD] Should this be set from an enviroment variable.
   [TBD] Is there already a command line switch for this?
  #+BEGIN_SRC emacs-lisp
  ;(setq debug-on-error t)
  #+END_SRC

* org-protocol
#+BEGIN_SRC emacs-lisp
  ;(server-start)
  (require 'org-protocol)
#+END_SRC
* Initial Frame Size
Fix initial window position.
  #+BEGIN_SRC emacs-lisp
  ;; Set initial frame size and position
  (defun my/set-initial-frame ()
    (let* ((base-factor 0.70)
          (a-width (* (display-pixel-width) base-factor))
          (a-height (* (display-pixel-height) base-factor))
          (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
          (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
      (set-frame-position (selected-frame) a-left a-top)
      (set-frame-size (selected-frame) (truncate a-width)  (truncate a-height) t)))
  (setq frame-resize-pixelwise t)
  (my/set-initial-frame)
  #+END_SRC

* Basic Look and feel
I don't like the a messy startup screen.

 #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-screen t)
   (setq visible-bell 1)
 #+END_SRC
* Fix Windows 10 cursor problem
 #+BEGIN_SRC emacs-lisp
 (setq w32-use-visible-system-caret nil)
 #+END_SRC

* Package Archives distros
Good for any emacs released since 2012
#+BEGIN_SRC emacs-lisp
  (setq package-check-signature nil)
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("elpa" . "https://elpa.gnu.org/packages/") t)
  ;; (add-to-list 'package-archives
  ;; 	     '("org" . "https://orgmode.org/elpa/") t)

  (package-initialize)
#+END_SRC
* Load use-package
  [TBD] Consider if this needs to be initialized
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t
        use-package-expand-minimally t))
;;  (require 'use-package)
#+END_SRC
* Buffer Auto reverting
#+BEGIN_SRC emacs-lisp
  ;; auto revert mode
  (global-auto-revert-mode 1)

  ;; dired auto revert
  (setf global-auto-revert-non-file-buffers t)
#+END_SRC
* IDO
#+BEGIN_SRC emacs-lisp
(use-package  ido
    :config
  (ido-mode t))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
  :config
   (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer 2
  :ensure t
  :pin melpa
  :bind
  (("C-x g" . magit-status)
   ("C-x M-d" . magit-dispatch-popup)))
 #+END_SRC
* org-roam
  I am setting up org-roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename "~/org/roam/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+END_SRC

* Crossplatform filename
Attempt specifiy filepaths in a cross platform way.

Another strategy would be specify classes of base paths in one place and
specify specific crossplatform functions and macros for path construction.
#+BEGIN_SRC emacs-lisp
(fset 'convert-windows-filename
      (if (fboundp 'cygwin-convert-file-name-from-windows)
	  'cygwin-convert-file-name-from-windows
	  'convert-standard-filename))
#+END_SRC

* Copy Filename to Buffer
#+BEGIN_SRC emacs-lisp
(defun my-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
#+END_SRC
* Setting up Aspell
aspell configuration is in [[~/.aspell.conf]]
Fixed on 7/2/2022 moving to DESKER
#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell")
#+END_SRC
* Generic arguments, paths and strings.
#+BEGIN_SRC emacs-lisp
  (defun double-quote-string(s)
     (concat "\"" s "\""))

  (defun single-quote-string (s)
     (concat "\'" s "\'"))

  (defun double-quote-list (l)
    (mapcar 'double-quote-string l))

  (defun single-quote-list (l)
    (mapcar 'single-quote-string l))

  (defun join-with-spaces (args)
     (mapconcat 'identity args " "))
#+END_SRC
* External Subsytems
  msys2 and cygwin have internal file system roots in Windows, those roots are defined here.
  Subsytem Roots
   Define where the roots of the file systems are located on Windows.
* Cygwin Root
  #+BEGIN_SRC emacs-lisp
	(setq +cygwin64-base-path+ "C:/cygwin64")
  #+END_SRC
* msys2 root
  #+BEGIN_SRC emacs-lisp
    ;; Paths to msys2 file root
    (let ((mingw64-root-mount "C:/devel/msys64")
	  (mingw64-bin-mount "C:/devel/msys64/usr/bin"))

    (add-to-list 'exec-path (concat mingw64-root-mount "/mingw64/bin"))
    (add-to-list 'exec-path (concat mingw64-root-mount "/usr/local/bin"))
    (add-to-list 'exec-path (concat mingw64-root-mount "/usr/bin"))
    (add-to-list 'exec-path mingw64-bin-mount))
    (setq +msys64-base-path+ "C:/devel/msys64/")
  #+END_SRC
* Subsystem emulators
   Subsystem parts need to be emulated.
* Cygwin Emulator
 #+BEGIN_SRC emacs-lisp
       (defun cygwin64-file-exists-p (file)
	 (file-exists-p (concat +cygwin64-base-path+ file)))
 #+END_SRC
* msys2 Emulator

 #+BEGIN_SRC emacs-lisp
   (defun msys64-file-exists-p (file)
     (file-exists-p (concat +msys64-base-path+ file)))

   (defun msys2-command (cmd params)
      (join-with-spaces (cons (msys2-command-string cmd) params)))


   (defun msys2-command-string (cmd)
     (concat +msys64-base-path+ "usr/bin/" cmd ".exe"))
 #+END_SRC
* Tools implemanted for various subsystems
* Cygwin Tools
    No tools for cygwin yet.
* msys2 Tools
* msys2/bash run
     Start a command in a msys2 shell
   #+BEGIN_SRC emacs-lisp
     (defun start-under-bash-login-shell (shell-task)
     "Excute a msys2-command under a msys2-64 bash login shell"
       (list (msys2-command-string "env")
	     (double-quote-string "MSYSTEM=MINGW64")
	     (msys2-command-string "bash")
	     "-l"
	     "-c"
	     shell-task))
    #+END_SRC
* Modus Theme Configuration
Main Page: [[https://protesilaos.com/emacs/modus-themes]]
#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :height 120)
    (require 'modus-themes)
    (setq modus-themes-mode-line '(accented borderless))
    (setq modus-themes-region '(bg-only))
    (setq modus-themes-paren-match '(bold intense))
    (setq modus-themes-lang-checkers '(background intense))
    (setq modus-themes-italic-constructs t)
    (setq modus-themes-bold-contructs t)
  ;;; Org Mode
  (setq modus-themes-heading
	`((1 . (rainbow bold intense 1.7))
	  (2 . (rainbow bold intense 1.6))
	  (3 . (rainbow bold intense 1.5))
	  (4 . (rainbow bold intense 1.4))
	  (5 . (rainbow bold intense 1.3))
	  (6 . (rainbow bold intense 1.2))
	  (t . (rainbow bold background 1.0))))
  (setq modus-themes-org-agenda
      '((header-block . (variable-pitch 1.5))
	(header-date . (grayscale workaholic bold-today 1.2))
	(event . (accented italic varied))
	(scheduled . uniform)
	(habit . traffic-light)))
  (load-theme 'modus-vivendi t)
#+END_SRC

* Rainbow Delimeters
#+BEGIN_SRC emacs-lisp tangle:no
  (use-package rainbow-delimiters
    :ensure t)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

* Shells
  [TBD] Decide what is CRUFF here.
  I am attempting to use the friendly-shell infrastructure.

  shell/git-bash works but has prompt problems.
#+BEGIN_SRC emacs-lisp
      (use-package friendly-shell
	:ensure t
	:config   
	  (defun shell/git-bash (&optional path)
	     (interactive)
	     (friendly-shell :path path
			     :interpreter "C:/Program Files/Git/bin/bash.exe"
			     ;;:interpreter-args '("-l")
			     )))


      (use-package friendly-remote-shell
	:ensure t
	:config
	   (defun shell/cisco (&optional path)
	     (interactive)
	     (with-shell-interpreter-connection-local-vars
	       (friendly-remote-shell :path path))))



	  ;; (setq win-shell-implementaions
		    ;;       `((cmd (shell))
		    ;; 	(ming64 ((defun my-shell-setup ()
		    ;;        "For Cygwin bash under Emacs 20"

		    ;;          (setq comint-scroll-show-maximum-output 'this)
		    ;;          (make-variable-buffer-local 'comint-completion-addsuffix))
		    ;;            (setq comint-completion-addsuffix t)
		    ;;            ;; (setq comint-process-echoes t) ;; reported that this is no longer needed
		    ;;            (setq comint-eol-on-send t)
		    ;;            (setq w32-quote-process-args ?\")
		    ;;            (add-hook 'shell-mode-hook 'my-shell-setup)))))

		    ;; (defun win-shell ())

		    ;; ;;; The MSYS-SHELL

		    ;; (defun msys-shell () 
		    ;;   (interactive)
		    ;;   (let ((explicit-shell-file-name (convert-standard-filename "c:/devel/msys64/usr/bin/bash.exe"))
		    ;; 	(shell-file-name "bash")
		    ;; 	(explicit-bash.exe-args '("--noediting" "--login" "-i"))) 
		    ;;     (setenv "SHELL" shell-file-name)
		    ;;     (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
		    ;;     (shell)))

		    ;; ;;; The MINGW64-SHELL

		    ;; (defun mingw64-shell () 
		    ;;        (interactive)
		    ;;        (let (( explicit-shell-file-name (convert-standard-filename  "c:/devel/msys64/mingw64/bin/bash.exe")))
		    ;; 	 (shell "*bash*")
		    ;; 	     (call-interactively 'shell)))
#+END_SRC
* Add shell extensions
[TBD] If this is org shell extenstion then put this in org-mode section.
#+BEGIN_SRC emacs-lisp
(use-package shx
  :ensure t)
#+END_SRC
* Tramp
[TBD] Review if this is correct after SSH has been reinstalled.
* The default connection method is plink
#+BEGIN_SRC emacs-lisp
(require 'tramp)
(setq tramp-default-method "plink")
;(setq tramp-verbose 10)
#+END_SRC
* Remote shell to cisco
#+BEGIN_SRC emacs-lisp
(defun cisco-remote-shell ()
  (interactive)
  (let ((default-directory "/plink:osmc@192.168.1.43:~"))
  (shell)))
#+END_SRC
* Paredit mode
  #+BEGIN_SRC emacs-lisp
    (use-package paredit
      :ensure t
      :config
	(add-hook 'lisp-mode-hook #'paredit-mode))
  #+END_SRC
* LISP Language
  I have many versions of LISP to use under emacs slime.
  I use quicklisp to download LISP packages.
  [TBD] I use autocomplete for slime complettion, but am considering switching to helm.
* Provision Various Common LISPs
 #+INDEX: Common Lisp!Provisioning
 Universal Startup Code should be here.
* Provision standard SBCL
 Return the standard SBCL options.
 #+BEGIN_SRC emacs-lisp
    (defun standard-sbcl-options()
      '("--noinform"))
 #+END_SRC
* Return slime entry with tag and env only if exec-path if found.
When the executable exec-path is found generate a slime entry under tag having the env enviroment.
#+BEGIN_SRC emacs-lisp
  (defun only-sbcl-p (tag exec-path env)
      (when (file-exists-p exec-path)
         (list tag
	   `( ,exec-path ,@(double-quote-list (standard-sbcl-options)))
	       :env
	       env)))
#+END_SRC
* Provision a SBCL entry for slime.
#+INDEX: SBCL!Slime provisioning
SBCL versions:
  - Add SBCL-2.0.0 msys2 compiled 
  - Add SBCL-2.2.1 msys2 compiled
#+BEGIN_SRC emacs-lisp
  (defun sbcl-2-2-6()
    (only-sbcl-p 'sbcl-2.2.6 "C:/devel/msys64/usr/local/sbcl-2.2.6/bin/sbcl.exe"
		 (list (concat "HOME=" (getenv "HOME")) "SBCL_HOME=C:/devel/msys64/usr/local/sbcl-2.2.6/lib/sbcl")))
#+END_SRC
* Provision a ABCL entry for slime
  When java and ABCL are located create an ABCL slime item.
  #+BEGIN_SRC emacs-lisp
  (defmacro provision-abcl()
    `(when (and (file-exists-p  (convert-standard-filename "C:/Program Files/ABCL/abcl.jar")))
	  `(abcl  ("java" "-jar" ,(convert-standard-filename "C:/Program Files/ABCL/abcl.jar")))))
  #+END_SRC
** TODO Verify that java also existes
* Provison a CCL entry for slime
  When a specific CCL binary is present create a CCL slime item.
    #+BEGIN_SRC emacs-lisp
      (defun provision-ccl ()
	(let ((ccl "C:/Users/zzzap/quicklisp/local-projects/ccl/wx86cl64.exe"))
          (when (file-exists-p ccl)
            `(ccl-64 (,ccl)))))
    #+END_SRC

* Provision a CLISP if on MSYS2
#+BEGIN_SRC emacs-lisp
  (defun provision-clisp-msys64 ()
    (when nil
    `(clisp-msys64 ())))
#+END_SRC
** TODO Fix MSYS2 Provisioning
* Provision a CLISP if on Cygwin
CYGWIN version of CLISP is not provisioned
#+BEGIN_SRC emacs-lisp
  (defun provision-clisp-cygwin64()
    (when nil
    `(clisp-cygwin64 ())))
#+END_SRC
** TODO Fix Cygwin Provisionsing
* Slime / Company
   Slime is the inferface to LISP on emacs.
#+INDEX: Common Lisp!Slime Provisioning
#+BEGIN_SRC emacs-lisp
(use-package slime-company
  :after (slime company)
  :config (setq slime-company-completion 'fuzzy
                slime-company-after-completion 'slime-company-just-one-space))
#+END_SRC
* Add quicklisp-helper
 [UPGRADE HACK]The slime  helper during the  28.1 upgrade and quicklisp-helper needed :tangle no to avoid errors/
 Load the quicklisp-helper file 
 #+INDEX: Common Lisp!quicklisp, slime helper
 #+INDEX: quicklisp!slime helper
 #+INDEX: Slime!quicklisp helper
 #+BEGIN_SRC emacs-lisp :tangle no
   ;;;; Build the implemenation lisp dynamically.
   ;;;; Remove all nil items from the list.
     ;;;; Load slime helper
     (load (expand-file-name "~/quicklisp/slime-helper.el"))
 #+END_SRC
* Slime Lisp Implemenatations
 #+INDEX: Slime!LISP Implmentations
 #+BEGIN_SRC emacs-lisp
   (setq slime-lisp-implementations
	 (seq-filter (lambda (e) e)
	   (list
	     (provision-ccl)
	     (sbcl-2-2-6)
	     (provision-clisp-msys64)
	     (provision-clisp-cygwin64))))
	     (provision-abcl)
 #+END_SRC

* Set Slime Contribs to slime-fancy
    Can I delete this?
  #+BEGIN_SRC emacs-lisp
    (setq slime-contribs '(slime-fancy))
  #+END_SRC
* Set Slime Keys
  #+BEGIN_SRC emacs-lisp
    (global-set-key "\C-cs" 'slime-selector)
  #+END_SRC

* Enable lisp-mode .lisp and .asd files
  #+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
	(append '((".*\\.asd\\'" . lisp-mode))
		auto-mode-alist))

  (setq auto-mode-alist
	(append '((".*\\.cl\\'" . lisp-mode))
		auto-mode-alist))
  #+END_SRC

* Common Lisp HyperSpec
  I use my local clone of the Hyperspec
* TODO Fix when HyperSpec is loaded.
  #+BEGIN_SRC emacs-lisp
    (when (getenv "HyperSpec")
     (setq common-lisp-hyperspec-root (convert-standard-filename (getenv "HyperSpec"))))
  #+END_SRC
* Pascal Setup
  [TBD] I have no pascal compiler configured.
#+BEGIN_SRC emacs-lisp
(add-hook 'pascal-mode-hook
	  (lambda ()
	    (set (make-local-variable 'compile-command)
		 (concat "fpc " (file-name-nondirectory (buffer-file-name)))))
	  t)

(setq auto-mode-alist
      (append '((".*\\.pas\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.pp\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.yml\\'" . yaml-mode))
	      auto-mode-alist))
#+END_SRC

* Org Mode Customizations
#+INDEX: org-mode!main configuration
The newest redesign of org mode gtd is to use a per user setup with no public shared data.
* killing frame for org-protcol capture
#+BEGIN_SRC emacs-lisp
  ;; Kill the frame if one was created for the capture
  (defvar kk/delete-frame-after-capture 0 "Whether to delete the last frame after the current capture")

  (defun kk/delete-frame-if-neccessary (&rest r)
    (cond
     ((= kk/delete-frame-after-capture 0) nil)
     ((> kk/delete-frame-after-capture 1)
      (setq kk/delete-frame-after-capture (- kk/delete-frame-after-capture 1)))
     (t
      (setq kk/delete-frame-after-capture 0)
      (delete-frame))))

  (advice-add 'org-capture-finalize :after 'kk/delete-frame-if-neccessary)
  (advice-add 'org-capture-kill :after 'kk/delete-frame-if-neccessary)
  (advice-add 'org-capture-refile :after 'kk/delete-frame-if-neccessary)
#+END_SRC
* Create permanent links for each heading in an org file.  
   Create CUSTOM_ID for each heading bases on a uniqure random sequence.
 #+BEGIN_SRC emacs-lisp  :tangle no :noexport:
	     (require 'org-id)
	     (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

	   (defun eos/org-custom-id-get (&optional pom create prefix)
	     "Get the CUSTOM_ID property of the entry at point-or-marker POM.
	      If POM is nil, refer to the entry at point. If the entry does
	      not have an CUSTOM_ID, the function returns nil. However, when
	      CREATE is non nil, create a CUSTOM_ID if none is present
	      already. PREFIX will be passed through to `org-id-new'. In any
	      case, the CUSTOM_ID of the entry is returned."
	     (interactive)
	     (org-with-point-at pom
	       (let ((id (org-entry-get nil "CUSTOM_ID")))
		 (cond
		  ((and id (stringp id) (string-match "\\S-" id))
		   id)
		  (create
		   (setq id (org-id-new (concat prefix "h")))
		   (org-entry-put pom "CUSTOM_ID" id)
		   (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
		   id)))))

     (defun org-id-new (&optional prefix)
       "Create a new globally unique ID.

     An ID consists of two parts separated by a colon:
     - a prefix
     - a unique part that will be created according to `org-id-method'.

     PREFIX can specify the prefix, the default is given by the variable
     `org-id-prefix'.  However, if PREFIX is the symbol `none', don't use any
     prefix even if `org-id-prefix' specifies one.

     So a typical ID could look like \"Org-4nd91V40HI\"."
       (let* ((prefix (if (eq prefix 'none)
			  ""
			(concat (or prefix org-id-prefix) "-")))
	      unique)
	 (if (equal prefix "-") (setq prefix ""))
	 (cond
	  ((memq org-id-method '(uuidgen uuid))
	   (setq unique (org-trim (shell-command-to-string org-id-uuid-program)))
	   (unless (org-uuidgen-p unique)
	     (setq unique (org-id-uuid))))
	  ((eq org-id-method 'org)
	   (let* ((etime (org-reverse-string (org-id-time-to-b36)))
		  (postfix (if org-id-include-domain
			       (progn
				 (require 'message)
				 (concat "@" (message-make-fqdn))))))
	     (setq unique (concat etime postfix))))
	  (t (error "Invalid `org-id-method'")))
	 (concat prefix unique)))

	 ;; automatically add ids to captured headlines
	 (add-hook 'org-capture-prepare-finalize-hook
		   (lambda () (eos/org-custom-id-get (point) 'create)))


   (defun org-id-new (&optional prefix)
     "Create a new globally unique ID.

   An ID consists of two parts separated by a colon:
   - a prefix
   - a unique part that will be created according to `org-id-method'.

   PREFIX can specify the prefix, the default is given by the variable
   `org-id-prefix'.  However, if PREFIX is the symbol `none', don't use any
   prefix even if `org-id-prefix' specifies one.

   So a typical ID could look like \"Org-4nd91V40HI\"."
     (let* ((prefix (if (eq prefix 'none)
			""
		      (concat (or prefix org-id-prefix) "-")))
	    unique)
       (if (equal prefix "-") (setq prefix ""))
       (cond
	((memq org-id-method '(uuidgen uuid))
	 (setq unique (org-trim (shell-command-to-string org-id-uuid-program)))
	 (unless (org-uuidgen-p unique)
	   (setq unique (org-id-uuid))))
	((eq org-id-method 'org)
	 (let* ((etime (org-reverse-string (org-id-time-to-b36)))
		(postfix (if org-id-include-domain
			     (progn
			       (require 'message)
			       (concat "@" (message-make-fqdn))))))
	   (setq unique (concat etime postfix))))
	(t (error "Invalid `org-id-method'")))
       (concat prefix unique)))


 (defun eos/org-add-ids-to-headlines-in-file ()
   "Add CUSTOM_ID properties to all headlines in the current
    file which do not already have one. Only adds ids if the
    `auto-id' option is set to `t' in the file somewhere. ie,
    #+OPTIONS: auto-id:t"
   (interactive)
   (save-excursion
     (widen)
     (goto-char (point-min))
     (when (re-search-forward "^#\\+OPTIONS:.*auto-id:t" (point-max) t)
       (org-map-entries (lambda () (eos/org-custom-id-get (point) 'create))))))

       ;; automatically add ids to saved org-mode headlines
       (add-hook 'org-mode-hook
		 (lambda ()
		   (add-hook 'before-save-hook
			     (lambda ()
			       (when (and (eq major-mode 'org-mode)
					  (eq buffer-read-only nil))
				 (eos/org-add-ids-to-headlines-in-file))))))



 #+END_SRC
* org mode location
#+BEGIN_SRC emacs-lisp
(setf org-mode-base-dir "~/org/")
#+END_SRC
* gtd location
#+BEGIN_SRC emacs-lisp
(setf org-gtd-dir (concat org-mode-base-dir "gtd/"))
#+END_SRC
* Org Key Binding
 #+BEGIN_SRC emacs-lisp
 ;;;; Org Mode key bindings.
 (global-set-key (kbd "C-c l") 'org-store-link)
 (global-set-key (kbd "C-c a") 'org-agenda)
 (global-set-key (kbd "C-c c") 'org-capture)
 (global-set-key (kbd "C-c b") 'org-switchb)
 #+END_SRC

* Configure BABEL languages
 [TBD] Do I really need to specify these at all?
 #+BEGIN_SRC emacs-lisp
 (org-babel-do-load-languages
  'org-babel-load-languages
  '((lisp . t)
    (emacs-lisp . t)))
 #+END_SRC

* org modules needed
 [TBD] Do I need org-habit  here?
 #+BEGIN_SRC emacs-lisp
 (setq org-modules '(org-habit org-checklist))
 #+END_SRC

* org-habit
 [TBD] Find out why I Should not delete this.
 #+BEGIN_SRC emacs-lisp
 (setq org-habit-graph-column 50)
 #+END_SRC

* Org link abbreviations
 #+BEGIN_SRC emacs-lisp
 (setq org-link-abbrev-alist
       '(("bugzilla" . "http://192.168.1.50/bugzilla/show_bug.cgi?id=")
	 ("bugzilla-comp" . "http://192.168.1.50/bugzilla/describecomponents.cgi?product=")))
 #+END_SRC
* Specify Default Path and Override from Enviroment Variable
[TBD] Should this macro be closer to the top of the file for reuse?
#+BEGIN_SRC emacs-lisp
  ;;; Specify a emacs variable from an environment variable env-string or  base,new-path-string
  (defmacro default-or-environment (emacs-var base new-path-string env-string) 
    `(setq ,emacs-var (if (getenv ,env-string)
                          (getenv ,env-string)
                          (concat ,base ,new-path-string))))
#+END_SRC

* Ensure there are standard user ~/org directories
 [TBD] is this how I am configured now?
 How to define the standard HOME org directory.
 Under windows and linux this is ~/org.
 
  #+BEGIN_SRC emacs-lisp
  ;; Create stadard org directories if not already present.
  ;; The standard user directory is ~/org in the HOME directory.
  ;; Override with the var ORG-USER-DIR.
  ;; The org-public-dir is a legacy model for shared tasks across all users.
  ;; The public shared model is to be deprecated in the light of the task-agenda model.
  (default-or-environment org-user-dir (getenv "HOME") "/org" "ORG-USER-DIR")
  (unless (file-directory-p org-user-dir)
    (make-directory  org-user-dir))
  ;; Define a global org directory
  (default-or-environment org-public-dir "c:/Users/Public/Documents" "/org" "ORG-PUBLIC-DIR")
  #+END_SRC

* Standard Notes file
 [TBD] Is this still relavent?
 This is a standard per User notes file.
 Unser windows and linux this ~/org/notes/notes.org
  #+BEGIN_SRC emacs-lisp
  ;; The Standard org note file is ~/org/notes/notes.
  ;; This can be set by the environment variable ORG-NOTES-FILE
  (default-or-environment org-notes-file org-user-dir "/nodes/notes.org" "ORG-NOTES-FILE")
  (setq org-default-notes-file org-notes-file)
  #+END_SRC

* org TODOs types
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)")))
#+END_SRC
* org TODO colors
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces '(("TODO" . "red")
			         ("NEXT" . "magenta")
				 ("WAITING" ."yellow1")
				 ("CANCELLED"."green")
				 ("DONE" . "green")));
#+END_SRC
* Task agenda context
 - This starts an agenda context
 #+BEGIN_SRC emacs-lisp
 ;;;; Customize the agenda locally
 (local-custom-file "local-custom-agenda.org" "Customize org-agenda")
 #+END_SRC
  - The following may be defined with the above values
    
* Capture Templates
Use [[~/.emacs.d/local-capture.org]] to change the capture template.
 #+BEGIN_SRC emacs-lisp
 ;;;; Customize the agenda locally
 (local-custom-file "local-capture.org" "Customize org-capture")
 #+END_SRC
* Always present the gtd.org file
Customize  this default by environment variable USER_REOPEN_FILES
 #+BEGIN_SRC emacs-lisp
 (find-file (concat org-gtd-dir "gtd.org"))
 #+END_SRC
 
* org mode add :shcmd to sh blocks
Using :shcmd "cmdproxy.exe" on Windows uses the emacs version of cmd.
Using :shcmd   msys2-base / "bin/bash.exe" will run a shell under msys2 bash.
Allow Windows CMD commands to be run from .org files.

See https://emacs.stackexchange.com/questions/19037/org-babel-invoking-cmd-exe

Example how to use, note "cmdproxy.exe" is a Windows Emacs file.
#+BEGIN_EXAMPLE
\#+BEGIN_SRC sh :shcmd "cmdproxy.exe"
dir
\#+END_SRC
#+END_EXAMPLE
#+BEGIN_SRC emacs-lisp
(require 'ob-shell)
(defadvice org-babel-sh-evaluate (around set-shell activate)
  "Add header argument :shcmd that determines the shell to be called."
  (defvar org-babel-sh-command)
  (let* ((org-babel-sh-command (or (cdr (assoc :shcmd params)) org-babel-sh-command)))
    ad-do-it))
#+END_SRC
* org-publish
#+BEGIN_SRC emacs-lisp
;;;; org-publishing is a local configuration.
(local-custom-file "local-publishing.org" "Configuration of org-publishing")
#+END_SRC  

* Report Debug Mark                                                :noexport:
#+BEGIN_SRC emacs-lisp
(message "Debug MARK")
#+END_SRC
* org-present
#+BEGIN_SRC emacs-lisp
(use-package org-present
  :ensure t
  :config
    (use-package visual-fill-column
      :ensure t
      :config
      (setq visual-fill-column-width 110
	    visual-fill-column-center-text t)))
#+END_SRC
* PS Print with GHOSTSCRIPT
#+BEGIN_SRC emacs-lisp
   (setq ps-lpr-command "C:/Program Files/gs/gs9.56.1/bin/gswin64c.exe")
   (setq ps-lpr-switches '("-q" "-dNOPAUSE" "-dBATCH" "-sDEVICE=mswinpr2" "-sOutputFile=\"%printer%Canon\ TS6000\ series\""))
   (setq ps-printer-name t)
   (setf ps-font-family 'Courier)
   (setf ps-font-size 10.0)
   (setf ps-line-number t)
   (setf ps-line-number-font-size 10)
#+END_SRC
* Final Presenation to the user.

* load per user settings
 #+BEGIN_SRC emacs-lisp
;;;; Various user settings is a local configuration.
 (local-custom-file "local-settings.org" "Final user settings")
 #+END_SRC

* Report Debug End :noexport:
#+BEGIN_SRC emacs-lisp
(message "Debug END")
#+END_SRC
