#+STARTUP: overview
#+TITLE: Emacs configuration
#+OPTIONS: num:nil ^:nil toc: nil
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+EXPORT-FILENAME: init.el
#+INDEX: Emacs!Configuration
* FRONT STUFF
** Documentation
*** General Coding 
Things in [[~/]] are symlink to [[~/Documents/Code]] .
*** Emacs configuration
init.el is generated from this file on save.

These are the configuration files.
  - [[file:~/.emacs.d/init.el]]
  - [[file:~/.emacs.d/settings.el]]
  - [[file:~/.emacs.d/settings.org]]
  - [[file:~/.emacs.d/local-settings.org]] Per user settings if this file is shared
  - [[file:~/.emacs.d/local-capture.org]]  org-capture stuff
  - [[file:~/.emacs.d/Office-Appointment.txt]] capture template for Office Appointments
  - [[file:~/.emacs.d/Testing-Appointment.txt]] capture template for Testing Appointments
  - [[file:~/.emacs.d/local-custom-agenda.org]] org-agenda stuff
  - [[file:~/.emacs.d/local-publishing.org]] org-publishing stuff

*** Revision Narative
    Current revision tasks are to cleanup the package archive and use-package 
* Add edit this file warning to init.el
Add a heading to file about editing init.el.
#+begin_src emacs-lisp
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
  (setq gc-cons-threshold (* 50 1000 1000))
  ;; You will most likely need to adjust this font size for your system!
  (defvar efs/default-font-size 180)
  (defvar efs/default-variable-font-size 180)

  ;; Make frame transparency overridable
  (defvar efs/frame-transparency '(90 . 90))
#+end_src

* Report Startup Time
#+begin_src emacs-lisp
(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                   (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src
* The emacs customization file.
 Define were emacs cusomization is saved and restored.
 #+BEGIN_SRC emacs-lisp
    ;;;; emacs customization file
   (setq custom-file "~/.config/emacs/.emacs-custom.el")
   (load custom-file)
 #+END_SRC
* Package Archives and use-package
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)
  ;(setq package-check-signature nil)
  (setq package-gnupghome-dir "~/.gnupg/")
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
  (setq use-package-always-defer t)

#+end_src
* Emacs debug-on-error
   [TBD] Should this be set from an enviroment variable.
   [TBD] Is there already a command line switch for this?
  #+BEGIN_SRC emacs-lisp
  ;(setq debug-on-error t)
  #+END_SRC

* Allow loading of a file from .emacs.d/
***  [TBD] Once the init.el generation is working
    - autosaving other .emacs.d/ configuration files could be done
      the following macro will need to be reconsidered.
      
** User custom setting from .emacs.d files.

#+BEGIN_SRC emacs-lisp
  ;;;; Macro to load user customizations from .emacs.d
  (defmacro local-custom-file (file description)
    `(progn
       ;(require 'org)
       ;;(message (concat "Looking for " ,description " file: " ,file ))
       (let ((file-and-path (expand-file-name ,file user-emacs-directory)))
	 (if (file-exists-p file-and-path)
	     (progn ;;(message (concat "org-babel-load of " file-and-path))
	            (require 'org)
		    (org-babel-load-file file-and-path))
	   (message (concat "Custom file is missing " file-and-path))))))

#+END_SRC
* Magic Modes
#+BEGIN_SRC emacs-lisp
  (setq magic-mode-alist '(("*.org" . org)))
#+END_SRC
* org-protocol - NO TANGLE
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'org-protocol)
#+END_SRC
* Initial Frame Size
Fix initial window position.
  #+BEGIN_SRC emacs-lisp
  ;; Set initial frame size and position
  (defun my/set-initial-frame ()
    (let* ((base-factor 0.70)
          (a-width (* (display-pixel-width) base-factor))
          (a-height (* (display-pixel-height) base-factor))
          (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
          (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
      (set-frame-position (selected-frame) a-left a-top)
      (set-frame-size (selected-frame) (truncate a-width)  (truncate a-height) t)))
  (setq frame-resize-pixelwise t)
  (my/set-initial-frame)
  #+END_SRC

* Basic Look and feel
I don't like the a messy startup screen.

 #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-screen t)
   (setq visible-bell 1)
 #+END_SRC
* Fix Windows 10 cursor problem
 #+BEGIN_SRC emacs-lisp
 (setq w32-use-visible-system-caret nil)
 #+END_SRC

* Buffer Auto reverting
#+BEGIN_SRC emacs-lisp
  ;; auto revert mode
  (global-auto-revert-mode 1)

  ;; dired auto revert
  (setf global-auto-revert-non-file-buffers t)
#+END_SRC
* IDO
#+BEGIN_SRC emacs-lisp
(use-package  ido
    :config
  (ido-mode t))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
  :config
   (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer 2
  :ensure t
  :pin melpa
  :bind
  (("C-x g" . magit-status)
   ("C-x M-d" . magit-dispatch-popup)))
 #+END_SRC
* org-roam NO TANGLE
  I am setting up org-roam
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename "~/org/roam/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+END_SRC

* Default Pathnames with Enviroment Overrides
#+BEGIN_SRC emacs-lisp
  ;;; Specify a emacs variable from an environment variable env-string or  base,new-path-string
  (defmacro default-or-environment (emacs-var base new-path-string env-string) 
    `(setq ,emacs-var (if (getenv ,env-string)
                          (getenv ,env-string)
                          (concat ,base ,new-path-string))))
#+END_SRC

* Crossplatform filename
Attempt specifiy filepaths in a cross platform way.

Another strategy would be specify classes of base paths in one place and
specify specific crossplatform functions and macros for path construction.
#+BEGIN_SRC emacs-lisp
(fset 'convert-windows-filename
      (if (fboundp 'cygwin-convert-file-name-from-windows)
	  'cygwin-convert-file-name-from-windows
	  'convert-standard-filename))
#+END_SRC

* Copy Filename to Buffer
#+BEGIN_SRC emacs-lisp
(defun my-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
#+END_SRC
* Ispell configured with Aspell
aspell configuration is in [[~/.aspell.conf]]
Fixed on 7/2/2022 moving to DESKER
[2022-10-07 Fri 18:12]
  - The EOL of the .aspell configuration files got corrupted.
  - They should all be Unix (LF) ends of lines.
#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "c:/devel/msys64/usr/bin/aspell.exe")
#+END_SRC
* Joining items as strings with and without quoting
#+BEGIN_SRC emacs-lisp
  (defun double-quote-string(s)
     (concat "\"" s "\""))

  (defun single-quote-string (s)
     (concat "\'" s "\'"))

  (defun double-quote-list (l)
    (mapcar 'double-quote-string l))

  (defun single-quote-list (l)
    (mapcar 'single-quote-string l))

  (defun join-with-spaces (args)
     (mapconcat 'identity args " "))
#+END_SRC
* Initialize My cygwin emulation
  #+BEGIN_SRC emacs-lisp
	(setq +cygwin64-base-path+ "C:/cygwin64")
  #+END_SRC
* Initialize My msys2 emulation
  #+BEGIN_SRC emacs-lisp
    ;; Paths to msys2 file root
    (let ((mingw64-root-mount "C:/devel/msys64")
	  (mingw64-bin-mount "C:/devel/msys64/usr/bin"))

    (add-to-list 'exec-path (concat mingw64-root-mount "/mingw64/bin"))
    (add-to-list 'exec-path (concat mingw64-root-mount "/usr/local/bin"))
    (add-to-list 'exec-path (concat mingw64-root-mount "/usr/bin"))
    (add-to-list 'exec-path mingw64-bin-mount))
    (setq +msys64-base-path+ "C:/devel/msys64/")
  #+END_SRC
* Cygwin Enviroment Emulation
 #+BEGIN_SRC emacs-lisp
       (defun cygwin64-file-exists-p (file)
	 (file-exists-p (concat +cygwin64-base-path+ file)))
 #+END_SRC
* msys2 Envir
oment Emulation
 #+BEGIN_SRC emacs-lisp
   (defun msys-path (path)
     (concat +msys64-base-path+ path))

   (defun msys64-file-exists-p (file)
     (file-exists-p (msys-path file)))

   (defun msys2-command (cmd params)
      (join-with-spaces (cons (msys2-command-string cmd) params)))


   (defun msys2-command-string (cmd)
     (concat (msys-path "usr/bin") cmd ".exe"))
 #+END_SRC
* Run a command in a msys2 shell
   #+BEGIN_SRC emacs-lisp
     (defun start-under-bash-login-shell (shell-task)
     "Excute a msys2-command under a msys2-64 bash login shell"
       (list (msys2-command-string "env")
	     (double-quote-string "MSYSTEM=MINGW64")
	     (msys2-command-string "bash")
	     "-l"
	     "-c"
	     shell-task))
    #+END_SRC
* Modus Theme Configuration
Main Page: [[https://protesilaos.com/emacs/modus-themes]]
#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
      :config
      (set-face-attribute 'default nil :height 120)
      (setq modus-themes-mode-line '(accented borderless))
      (setq modus-themes-region '(bg-only))
    (setq modus-themes-paren-match '(bold intense))
    (setq modus-themes-lang-checkers '(background intense))
    (setq modus-themes-italic-constructs t)
    (setq modus-themes-bold-contructs t)
  ;;; Org Mode
    (setq modus-themes-heading
	`((1 . (rainbow bold intense 1.7))
	  (2 . (rainbow bold intense 1.6))
	  (3 . (rainbow bold intense 1.5))
	  (4 . (rainbow bold intense 1.4))
	  (5 . (rainbow bold intense 1.3))
	  (6 . (rainbow bold intense 1.2))
	  (t . (rainbow bold background 1.0))))
    (setq modus-themes-org-agenda
      '((header-block . (variable-pitch 1.5))
	(header-date . (grayscale workaholic bold-today 1.2))
	(event . (accented italic varied))
	(scheduled . uniform)
	(habit . traffic-light)))
    (load-theme 'modus-vivendi t))
#+END_SRC

* Rainbow Delimeters
#+BEGIN_SRC emacs-lisp tangle:no
  (use-package rainbow-delimiters)
#+END_SRC
* Powershell
#+begin_src emacs-lisp
  (defun powershell()
    (interactive)
    (let ((explicit-shell-file-name "powershell.exe")
	  (explicit-powershell.exe-args '()))
      (shell (generate-new-buffer-name "*powershell*"))))
#+end_src
* Shells
  [TBD] Decide what is CRUFF here.
  I am attempting to use the friendly-shell infrastructure.

  shell/git-bash works but has prompt problems.
#+BEGIN_SRC emacs-lisp
      (use-package friendly-shell
	:ensure t
	:config   
	  (defun shell/git-bash (&optional path)
	     (interactive)
	     (friendly-shell :path path
			     :interpreter "C:/Program Files/Git/bin/bash.exe"
			     ;;:interpreter-args '("-l")
			     )))


      (use-package friendly-remote-shell
	:ensure t
	:config
	   (defun shell/cisco (&optional path)
	     (interactive)
	     (with-shell-interpreter-connection-local-vars
	       (friendly-remote-shell :path path))))



	  ;; (setq win-shell-implementaions
		    ;;       `((cmd (shell))
		    ;; 	(ming64 ((defun my-shell-setup ()
		    ;;        "For Cygwin bash under Emacs 20"

		    ;;          (setq comint-scroll-show-maximum-output 'this)
		    ;;          (make-variable-buffer-local 'comint-completion-addsuffix))
		    ;;            (setq comint-completion-addsuffix t)
		    ;;            ;; (setq comint-process-echoes t) ;; reported that this is no longer needed
		    ;;            (setq comint-eol-on-send t)
		    ;;            (setq w32-quote-process-args ?\")
		    ;;            (add-hook 'shell-mode-hook 'my-shell-setup)))))

		    ;; (defun win-shell ())

		    ;; ;;; The MSYS-SHELL

		    ;; (defun msys-shell () 
		    ;;   (interactive)
		    ;;   (let ((explicit-shell-file-name (convert-standard-filename "c:/devel/msys64/usr/bin/bash.exe"))
		    ;; 	(shell-file-name "bash")
		    ;; 	(explicit-bash.exe-args '("--noediting" "--login" "-i"))) 
		    ;;     (setenv "SHELL" shell-file-name)
		    ;;     (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
		    ;;     (shell)))

		    ;; ;;; The MINGW64-SHELL

		    ;; (defun mingw64-shell () 
		    ;;        (interactive)
		    ;;        (let (( explicit-shell-file-name (convert-standard-filename  "c:/devel/msys64/mingw64/bin/bash.exe")))
		    ;; 	 (shell "*bash*")
		    ;; 	     (call-interactively 'shell)))
#+END_SRC
* Add shell extensions
[TBD] If this is org shell extenstion then put this in org-mode section.
#+BEGIN_SRC emacs-lisp
(use-package shx
  :ensure t)
#+END_SRC
* Tramp
[TBD] Review if this is correct after SSH has been reinstalled.
* The default connection method is plink
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :config
      (setq tramp-default-method "plink")
      (defun cisco-remote-shell ()
        (interactive)
        (let ((default-directory "/plink:osmc@192.168.1.43:~"))
          (shell))))
#+END_SRC
* Paredit mode
  #+BEGIN_SRC emacs-lisp
    (use-package paredit
      :hook lisp-mode)
    #+END_SRC
* A standard slime entry for slime-lisp-implemenations
#+BEGIN_SRC emacs-lisp
   (defmacro add-slime-lisp (tag program program-args environment)
    "The format of a standard slime entry for a lisp implenatation."
   `(list ,tag (cons ,program ,program-args) :env ,environment))
#+END_SRC
* Standard Options for SBCL startup
#+BEGIN_SRC emacs-lisp
  ;;;; The standard options for SBCL
  (defun invoke-standard-sbcl (tag program environment)
    (add-slime-lisp tag program '("--noinform") environment))
#+END_SRC

* SBCL compiled under MSYS2 in TWR standard locations
#+BEGIN_SRC emacs-lisp
  (defun msys-sbcl (tag path)
    "Create a slime entry for the tag if the sbcl.exe is found."
  ;;; The path is the path to the sbcl-version container.
  ;;;
  ;;; The standard place I store sbcl that I compile are /usr/local/sbcl-version
  ;;;
  ;;; File System Template for a sbcl implemenation
  ;;;
  ;;; sbcl-version/
  ;;;   bin/
  ;;;     sbcl.exec ; The executable
  ;;;   lib/
  ;;;     sbcl/     ; SBCL_HOME
  ;;;       contrib/
  ;;;       sbcl.core ; the core image
  ;;;       sbcl.mk

     (let ((exec-path (msys-path (concat path "bin/sbcl.exe")))
	   (home-path (msys-path (concat path "lib/sbcl/"))))
       (when (file-exists-p exec-path)
		(invoke-standard-sbcl tag exec-path (list (concat "SBCL_HOME=" home-path ))))))
#+END_SRC
* SBCL Windows Distrs TWR standard locations
#+BEGIN_SRC emacs-lisp

  (defun win-sbcl (tag path)
    (let* ((twr-win (concat "C:/devel/msys64/usr/local/sbcl/win/" path "/"))
	   (exec-path (concat twr-win "sbcl.exe"))
	   (home-path twr-win))
      (when (file-exists-p exec-path)
	(invoke-standard-sbcl tag exec-path (list (concat "SBCL_HOME=" home-path))))))
#+END_SRC
* CCL for SLIME
  When a specific CCL binary is present create a CCL slime item.
    #+BEGIN_SRC emacs-lisp
      (defun provision-ccl (tag path)
	  (when (file-exists-p path)
	    `(,tag (,path))))
    #+END_SRC

* Provision a ABCL entry for slime
  When java and ABCL are located create an ABCL slime item.
  #+BEGIN_SRC emacs-lisp
    (defun provision-abcl()
      (let ((java (concat "c:/Program Files/Java/" (if t "jdk-18.0.2.1" "jdk1.8.0_333") "/bin/java.exe"))
	    (abcl "c:/Program Files/ABCL/abcl-src-1.9.0/dist/abcl.jar"))
	     (when (and (file-exists-p  java) (file-exists-p abcl))
	       `(abcl  ,(list java "-jar" abcl)))))
  #+END_SRC
** Provision a CLISP if on MSYS2
#+BEGIN_SRC emacs-lisp
  (defun provision-clisp-msys64 ()
    (when nil
    `(clisp-msys64 ())))
#+END_SRC
** Provision a CLISP if on Cygwin
CYGWIN version of CLISP is not provisioned
#+BEGIN_SRC emacs-lisp
  (defun provision-clisp-cygwin64()
    (when nil
    `(clisp-cygwin64 ())))
#+END_SRC
* Untested or not working LISP implemenatations
* Slime / Company
   Slime is the inferface to LISP on emacs.
#+INDEX: Common Lisp!Slime Provisioning
#+BEGIN_SRC emacs-lisp :tangle no
(use-package slime-company 
  :after (slime company)
  :config (setq slime-company-completion 'fuzzy
                slime-company-after-completion 'slime-company-just-one-space))
#+END_SRC
* Add quicklisp-helper
 [UPGRADE HACK]The slime  helper during the  28.1 upgrade and quicklisp-helper needed :tangle no to avoid errors/
 Load the quicklisp-helper file 
 #+INDEX: Common Lisp!quicklisp, slime helper
 #+INDEX: quicklisp!slime helper
 #+INDEX: Slime!quicklisp helper
 #+BEGIN_SRC emacs-lisp
   ;;;; Build the implemenation lisp dynamically.
   ;;;; Remove all nil items from the list.
     ;;;; Load slime helper
     (load (expand-file-name "~/Documents/Code/quicklisp/slime-helper.el"))
 #+END_SRC
* Report Debug START  :noexport:
#+BEGIN_SRC emacs-lisp
(message "Debug START")
#+END_SRC

* Report Debug MARK                                                :noexport:
#+BEGIN_SRC emacs-lisp
(message "Debug MARK")
#+END_SRC
* SLIME Configuation
 #+INDEX: Slime!LISP Implmentations
 #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path "C:/devel/msys64/usr/local/slime")
   ;;;; Configure slime from the above provisionsing
   ;;;; Remove any empty items
	(require 'slime)
	(require 'slime-autoloads)
	(if nil
	    (progn
	      (setenv "SBCL_HOME" (msys-path "usr/local/sbcl/msys/2.2.6/lib/sbcl/"))
	      (setf inferior-lisp-program (msys-path "usr/local/sbcl/msys/2.2.6/bin/sbcl.exe")))
	    (progn
	  (setq slime-lisp-implementations
	    (seq-filter (lambda (e) e)
	      (list
	       (win-sbcl 'win-sbcl-2.2.7 "2.2.7")
	       (win-sbcl 'win-sbcl-2.2.6 "2.2.6")
	       (msys-sbcl 'msys-sbcl-2.2.6 "usr/local/sbcl/msys/2.2.6/")
	       (msys-sbcl 'msys-sbcl-2.2.5 "usr/local/sbcl/msys/2.2.5/")
	       (provision-ccl 'ccl "C:/Users/zzzap/quicklisp/local-projects/ccl/wx86cl64.exe")
	       (provision-clisp-msys64)
	       (provision-clisp-cygwin64)
	       (provision-abcl))))
       (setq slime-contribs '(slime-fancy))
       (global-set-key "\C-cs" 'slime-selector)))
 #+END_SRC
* Report Debug End :noexport:
#+BEGIN_SRC emacs-lisp
(message "Debug END")
#+END_SRC
* Enable lisp-mode .lisp and .asd files
  #+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
	(append '((".*\\.asd\\'" . lisp-mode))
		auto-mode-alist))

  (setq auto-mode-alist
	(append '((".*\\.cl\\'" . lisp-mode))
		auto-mode-alist))
  #+END_SRC

* Common Lisp HyperSpec
  I use my local clone of the Hyperspec
* Hyperspec Root is loaded from Enviroment location
  #+BEGIN_SRC emacs-lisp
    (when (getenv "HyperSpec")
     (setq common-lisp-hyperspec-root (convert-standard-filename (getenv "HyperSpec"))))
  #+END_SRC
* Pascal Setup
  [TBD] I have no pascal compiler configured.
#+BEGIN_SRC emacs-lisp
(add-hook 'pascal-mode-hook
	  (lambda ()
	    (set (make-local-variable 'compile-command)
		 (concat "fpc " (file-name-nondirectory (buffer-file-name)))))
	  t)

(setq auto-mode-alist
      (append '((".*\\.pas\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.pp\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.yml\\'" . yaml-mode))
	      auto-mode-alist))
#+END_SRC

* Org Mode
**  Make tab act natively in org source blocks
#+begin_src emacs-lisp
  (use-package org
    :pin elpa
    :config
    (setq org-src-tab-acts-natively t)
#+end_src
** Org Structure Templates
#+BEGIN_SRC emacs-lisp
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+END_SRC
** pdflatex fixed with org export path to perl
#+BEGIN_SRC emacs-lisp
  ;; Where org-export latex can find perl
  (setenv "PATH" (concat (getenv "PATH") (concat ";" (msys-path "usr/bin/"))))
#+END_SRC

** org global properties - efforts
#+BEGIN_SRC emacs-lisp
  (setf org-global-properties
      '(("Effort_ALL" . "0:05 0:10 0:15 0:30 1:00 2:00 4:00 6:00 8:00")))
#+END_SRC  
** killing frame for org-protcol capture
#+BEGIN_SRC emacs-lisp
  ;; Kill the frame if one was created for the capture
  (defvar kk/delete-frame-after-capture 0 "Whether to delete the last frame after the current capture")

  (defun kk/delete-frame-if-neccessary (&rest r)
    (cond
     ((= kk/delete-frame-after-capture 0) nil)
     ((> kk/delete-frame-after-capture 1)
      (setq kk/delete-frame-after-capture (- kk/delete-frame-after-capture 1)))
     (t
      (setq kk/delete-frame-after-capture 0)
      (delete-frame))))

  (advice-add 'org-capture-finalize :after 'kk/delete-frame-if-neccessary)
  (advice-add 'org-capture-kill :after 'kk/delete-frame-if-neccessary)
  (advice-add 'org-capture-refile :after 'kk/delete-frame-if-neccessary)
#+END_SRC
** org mode location
#+BEGIN_SRC emacs-lisp
  (setf org-mode-base-dir "~/org/")
#+END_SRC
** gtd location
#+BEGIN_SRC emacs-lisp
  (setf org-gtd-dir (concat org-mode-base-dir "gtd/"))
#+END_SRC
** Org Key Binding
#+BEGIN_SRC emacs-lisp
  ;;;; Org Mode key bindings.
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c b") 'org-switchb)
#+END_SRC

** Configure BABEL languages
 #+BEGIN_SRC emacs-lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((lisp . t)
      (emacs-lisp . t)))
 #+END_SRC

** org modules needed
 #+BEGIN_SRC emacs-lisp
   (setq org-modules '(org-habit org-checklist ox-extra))
 #+END_SRC
** Header Text Ignore
This code is bugged can't load ox-extras
#+begin_src emacs-lisp :tangle no
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
#+end_src
** org-habit
 [TBD] Find out why I Should not delete this.
 #+BEGIN_SRC emacs-lisp
   (setq org-habit-graph-column 50)
 #+END_SRC
** Org link abbreviations
 #+BEGIN_SRC emacs-lisp
   (setq org-link-abbrev-alist
	 '(("bugzilla" . "http://192.168.1.50/bugzilla/show_bug.cgi?id=")
	   ("bugzilla-comp" . "http://192.168.1.50/bugzilla/describecomponents.cgi?product=")
	   ("code" . "file:///C:/Users/zzzap/Documents/Code/quicklisp/local-projects/%s")
	   ("common-docs" . "file:///C:/Users/zzzap/Documents/Common-Document-Store/%s")))
 #+END_SRC
** Ensure there are standard user ~/org directories
 [TBD] is this how I am configured now?
 How to define the standard HOME org directory.
 Under windows and linux this is ~/org.
 
  #+BEGIN_SRC emacs-lisp
    ;; Create stadard org directories if not already present.
    ;; The standard user directory is ~/org in the HOME directory.
    ;; Override with the var ORG-USER-DIR.
    ;; The org-public-dir is a legacy model for shared tasks across all users.
    ;; The public shared model is to be deprecated in the light of the task-agenda model.
    (default-or-environment org-user-dir (getenv "HOME") "/org" "ORG-USER-DIR")
       (unless (file-directory-p org-user-dir)
	 (make-directory  org-user-dir))
    ;; Define a global org directory
    (default-or-environment org-public-dir "c:/Users/Public/Documents" "/org" "ORG-PUBLIC-DIR")
  #+END_SRC

** Standard Notes file
 [TBD] Is this still relavent?
 This is a standard per User notes file.
 Unser windows and linux this ~/org/notes/notes.org
  #+BEGIN_SRC emacs-lisp
    ;; The Standard org note file is ~/org/notes/notes.
    ;; This can be set by the environment variable ORG-NOTES-FILE
    (default-or-environment org-notes-file org-user-dir "/nodes/notes.org" "ORG-NOTES-FILE")
    (setq org-default-notes-file org-notes-file)
  #+END_SRC

** org TODOs types
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)")))
#+END_SRC
** org TODO colors
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces '(("TODO" . "red")
			         ("NEXT" . "magenta")
				 ("WAITING" ."yellow1")
				 ("CANCELLED"."green")
				 ("DONE" . "green")));
#+END_SRC
** Task agenda context
 - This starts an agenda context
 #+BEGIN_SRC emacs-lisp
   ;;;; Customize the agenda locally
   (local-custom-file "local-custom-agenda.org" "Customize org-agenda")
 #+END_SRC
  - The following may be defined with the above values
    
** Capture Templates
Use [[~/.emacs.d/local-capture.org]] to change the capture template.
 #+BEGIN_SRC emacs-lisp
   ;;;; Customize the agenda locally
   (let ((base (file-name-directory (or load-file-name (buffer-file-name)))))
     (default-or-environment gtd-template-dir base  "" "ORG-TEMPLATE-DIR")
     (local-custom-file "local-capture.org" "Customize org-capture"))
 #+END_SRC
** org mode add :shcmd to sh blocks
  - Using :shcmd "cmdproxy.exe" on Windows uses the emacs version of cmd.
  - Using :shcmd   msys2-base / "bin/bash.exe" will run a shell under msys2 bash.
  - Allow Windows CMD commands to be run from .org files.

  - See https://emacs.stackexchange.com/questions/19037/org-babel-invoking-cmd-exe

  - Example how to use, note "cmdproxy.exe" is a Windows Emacs file.
#+BEGIN_EXAMPLE
\#+BEGIN_SRC sh :shcmd "cmdproxy.exe"
dir
\#+END_SRC
#+END_EXAMPLE
#+BEGIN_SRC emacs-lisp
  (require 'ob-shell)
  (defadvice org-babel-sh-evaluate (around set-shell activate)
    "Add header argument :shcmd that determines the shell to be called."
    (defvar org-babel-sh-command)
    (let* ((org-babel-sh-command (or (cdr (assoc :shcmd params)) org-babel-sh-command)))
      ad-do-it))
#+END_SRC
** org-publish
#+BEGIN_SRC emacs-lisp
  ;;;; org-publishing is a local configuration.
  (local-custom-file "local-publishing.org" "Configuration of org-publishing")
#+END_SRC  

** org-present
#+BEGIN_SRC emacs-lisp
  (use-package org-present
    :ensure t
    :config
      (use-package visual-fill-column
	:ensure t
	:config
	(setq visual-fill-column-width 110
	      visual-fill-column-center-text t)))
#+END_SRC
** Bullets and fonts for org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
			  '(("^ *\\([-]\\) "
			    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (dolist (face '((org-level-1 . 1.2)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Make sure org-indent face is available
  (require 'org-indent)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
#+END_SRC
** end of org config
#+begin_src emacs-lisp
  )
#+end_src
* PS Print with GHOSTSCRIPT
#+BEGIN_SRC emacs-lisp
   (setq ps-lpr-command "C:/Program Files/gs/gs9.56.1/bin/gswin64c.exe")
   (setq ps-lpr-switches '("-q" "-dNOPAUSE" "-dBATCH" "-sDEVICE=mswinpr2" "-sOutputFile=\"%printer%Canon\ TS6000\ series\""))
   (setq ps-printer-name t)
   (setf ps-font-family 'Courier)
   (setf ps-font-size 10.0)
   (setf ps-line-number t)
   (setf ps-line-number-font-size 10)
#+END_SRC

* Eshell
#+begin_src emacs-lisp
  (defun efs/configure-eshell ()
	   ;; Save command history when commands are entered
	   (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

	   ;; Truncate buffer for performance
	   (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

	   (setq eshell-history-size         10000
		 eshell-buffer-maximum-lines 10000
		 eshell-hist-ignoredups t
		 eshell-scroll-to-bottom-on-input t))

  (use-package eshell
	   :hook (eshell-first-time-mode . efs/configure-eshell))

  (use-package eshell-git-prompt
    :ensure t
    :config
      (eshell-git-prompt-use-theme 'powerline))
#+end_src
* Dired
  - dired is configured as a file manager.
** Single Dired buffer
#+begin_src emacs-lisp
  (use-package dired-single
    :after
      dired
    :config
      (defun twr/dired-init ()
	(define-key dired-mode-map [remap dired-find-file]
	  'dired-single-buffer)
	(define-key dired-mode-map [remap dired-mouse-find-file-other-window]
	  'dired-single-buffer-mouse)
	(define-key dired-mode-map [remap dired-up-directory]
	  'dired-single-up-directory))
      (twr/dired-init)
      (setq dired-single-use-magic-buffer t)
      ;; F5 is my special key
      (global-set-key [(f5)] 'dired-single-magic-buffer)
      (global-set-key [(control f5)] (function
	(lambda nil (interactive)
	  (dired-single-magic-buffer default-directory))))
      (global-set-key [(shift f5)] (function
	(lambda nil (interactive)
	  (message "Current directory is: %s" default-directory))))
      (global-set-key [(meta f5)] 'dired-single-toggle-buffer-name))
#+end_src
** All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
	:ensure t
	:pin melpa
	:config
	(add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src
** File Sort Order
#+begin_src emacs-lisp
  (defun mydired-sort ()
	  "Sort dired listings with directories first."
	  (save-excursion
	    (let (buffer-read-only)
	      (forward-line 2) ;; beyond dir. header 
	      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
	    (set-buffer-modified-p nil)))

  (defadvice dired-readin
	  (after dired-after-updating-hook first () activate)
	  "Sort dired listings with directories first before adding marks."
	  (mydired-sort))
#+END_SRC
** diredc - NOT TANGLED
#+begin_src emacs-lisp :tangle no
  (use-package diredc)
#+end_src
** Peep Dired - NOT TANGLED
#+begin_src emacs-lisp :tangle no
  (use-package peep-dired
  :config
  ; kill buffers when diabling the mode
  (setq peep-dired-cleanup-on-disable t)
  ; kill buffers when you move to another
  (setq peep-direct-cleanup-on eagerly t)
  ; set mode for peeped buffers
  (setq peep-dired-enable-on-directories t)
  ; file  types not to open
  (setq peep-dired-ignored-extensions '("mkv" "iso" "mp4"))
#+end_src
* Openwith NO TANGLE
#+begin_src emacs-lisp :tangle no
  (require 'openwith)

  (setq openwith-associatsions
	 (list (list (openwith-make-extension-regexp '("mpg" "mpeg" "mp3" "mp4"
					      "avi" "wmv" "wav" "mov" "flv"
					      "ogm" "ogg" "mkv")) "vlc.exe")
	       (list (openwith-make-extension-regexp '("JPEG" "JPG"))
		     "c:/Program Files (x86)/JPEGView/JPEGView.exe")))
#+end_src
* Auto-tangle configuration files.
#+begin_src emacs-lisp
  ;; Autommatically tangle our Emacs.org config file when we save it.
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/Documents/Code/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src
* Final Presenation to the user.

* load per user settings
 #+BEGIN_SRC emacs-lisp
;;;; Various user settings is a local configuration.
 (local-custom-file "local-settings.org" "Final user settings")
 #+END_SRC


* Adjust for better GC
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))  
#+end_src
