#+STARTUP: overview
#+TITLE: The Emacs configuration of Tom Rake  
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+OPTIONS: toc:3
* Add Generated from Emacs.org warning.
#+begin_src emacs-lisp
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
#+end_src
* Platform specific items by Chezmoi_config
#+begin_src emacs-lisp
  ;; Allow chezmoi_config.el to define things:
  ;;   msys2 paths and enviroments
  ;;   java locations
  (condition-case err
      (load "chezmoi_config")
    (file-missing
     (message "%s" (error-message-string err))))
#+end_src
* Adding the scripts directory  to path
#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "scripts/" user-emacs-directory))
#+end_src
* Emacs Garbage Collection Tweeking
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src
* Font and Frame Tweeking
#+begin_src emacs-lisp
  ;; You will most likely need to adjust this font size for your system!
  (defvar efs/default-font-size 180)
  (defvar efs/default-variable-font-size 180)

  ;; Make frame transparency overridable
  (defvar efs/frame-transparency '(90 . 90))
#+end_src

* Initial Buffer Choice
#+begin_src emacs-lisp
(setq initial-buffer-choice (concat user-emacs-directory "startup-buffer.org"))
#+end_src
* Default Coding System
#+begin_src emacs-lisp
  ;; UTF-8 as default encoding
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-keyboard-coding-system 'utf-8-unix)

  ;; do this especially on Windows, else python output problem
  (set-terminal-coding-system 'utf-8-unix)  
#+end_src
* Report Startup Time

#+begin_src emacs-lisp
  ;;;; Reporting Startup Time
    (defun efs/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
	       (format "%.2f seconds"
		       (float-time
		       (time-subtract after-init-time before-init-time)))
	       gcs-done))

    (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src
* The emacs customization file.
 Define were emacs cusomization is saved and restored.
 #+BEGIN_SRC emacs-lisp
   ;;;; define emacs customization file and load it.
   (setq custom-file (expand-file-name "emacs-custom.el" user-emacs-directory))
   (load custom-file)
 #+END_SRC
* Package Archives and use-package
#+begin_src emacs-lisp
  ;;;; Initialize package sources
  (require 'package)
  ;(setq package-check-signature nil)
  (setq package-gnupghome-dir "~/.gnupg/")
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (package-install 'htmlize)
  ;;;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  ;;;; use-package
  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
  (setq use-package-always-defer t)

#+end_src
* Emacs debug-on-error
   [TBD] Should this be set from an enviroment variable.
   [TBD] Is there already a command line switch for this?
  #+BEGIN_SRC emacs-lisp
	;;;; Emacs Debug On Error
	   ;(setq debug-on-error t)
  #+END_SRC

* Allow loading of a file from .emacs.d/
***  [TBD] Once the init.el generation is working
    - autosaving other .emacs.d/ configuration files could be done
      the following macro will need to be reconsidered.
      
** User custom setting from .emacs.d files.

#+BEGIN_SRC emacs-lisp
  ;;;; Macro to load user customizations from .emacs.d
  (defmacro local-custom-file (file description)
    `(progn
       ;(require 'org)
       ;;(message (concat "Looking for " ,description " file: " ,file ))
       (let ((file-and-path (expand-file-name ,file user-emacs-directory)))
	 (if (file-exists-p file-and-path)
	     (progn ;;(message (concat "org-babel-load of " file-and-path))
	            (require 'org)
		    (org-babel-load-file file-and-path))
	   (message (concat "Custom file is missing " file-and-path))))))

#+END_SRC
* Magic Modes
#+BEGIN_SRC emacs-lisp
  ;;;; Magic File modes
  (setq magic-mode-alist '(("*.org" . org)))
#+END_SRC
* Initial Frame Size
[[https://www.gnu.org/software/emacs/manual/html_node/efaq/Fullscreen-mode-on-MS_002dWindows.html]]
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook 'toggle-frame-maximized)
#+end_src
Fix initial window position.
  #+BEGIN_SRC emacs-lisp :tangle no
    ;;;; Set initial frame size and position
    (defun my/set-initial-frame ()
      (let* ((base-factor 0.70)
	    (a-width (* (display-pixel-width) base-factor))
	    (a-height (* (display-pixel-height) base-factor))
	    (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
	    (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
	(set-frame-position (selected-frame) a-left a-top)
	(set-frame-size (selected-frame) (truncate a-width)  (truncate a-height) t)))
    (setq frame-resize-pixelwise t)
    (my/set-initial-frame)
  #+END_SRC

* Basic Look and feel
I don't like the a messy startup screen.

 #+BEGIN_SRC emacs-lisp
   ;;;; Have a clean statup screen
  ; (setq inhibit-startup-screen t)
   (setq visible-bell 1)
   ;;;; Turn off tool bar
   (tool-bar-mode 0)
 #+END_SRC
* Fix Windows 10 cursor problem
 #+BEGIN_SRC emacs-lisp
 (setq w32-use-visible-system-caret nil)
 #+END_SRC

* Buffer Auto reverting
#+BEGIN_SRC emacs-lisp
  ;;;; auto revert mode
  (global-auto-revert-mode 1)

  ;;;; dired auto revert
  (setf global-auto-revert-non-file-buffers t)
#+END_SRC
* IDO
#+BEGIN_SRC emacs-lisp
(use-package  ido
    :config
  (ido-mode t))
#+END_SRC
* Report Debug START  :noexport:
Print Debug markers in *messages*
#+BEGIN_SRC emacs-lisp :eval never-export
(message "Debug START")
#+END_SRC

* Which-Key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t)
#+end_src
* Vertico
This is recommended setup from  [[https://github.com/minad/vertico]]
I have the following issues
- I want the list resized when windows is resized
- I want the items sorted alpha, directories at the top.
  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Programmed-Completion.html]]
    - display-sort-function
    - completion-table-dynamic ???
Read up on [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html]]
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    )
  (use-package savehist
    :init
    (savehist-mode))
#+end_src
* org-roam NO TANGLE
  I am setting up org-roam
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename "~/org/roam/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+END_SRC

* Default Pathnames with Enviroment Overrides
Check and/or Revise this trickery!!!!!
#+BEGIN_SRC emacs-lisp
  ;;; Specify a emacs variable from an environment variable env-string or  base,new-path-string
  (defmacro default-or-environment (emacs-var base new-path-string env-string) 
    `(setq ,emacs-var (if (getenv ,env-string)
                          (getenv ,env-string)
                          (concat ,base ,new-path-string))))
#+END_SRC

* Ispell configured with Aspell
aspell configuration is in [[~/.aspell.conf]]
Fixed on 7/2/2022 moving to DESKER
[2022-10-07 Fri 18:12]
  - The EOL of the .aspell configuration files got corrupted.
  - They should all be Unix (LF) ends of lines.
#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell")
#+END_SRC
* JAVA Interface
Certain tools need java set that location here.
#+begin_src emacs-lisp
  ;; The java interface assumption is you can execute the program "java"
  ;; There is no jdk to be considered.
    (if (executable-find "java")
	(setq my-java "java")
	(message "******** java not found *******"))
#+end_src
* Language Tool
#+begin_src emacs-lisp
  (use-package langtool
    :ensure t
    :config
      (setq langtool-java-bin my-java)
      (setq langtool-language-tool-jar  "c:/Users/Public/Documents/LanguageTool-5.9/languagetool-commandline.jar")
    :bind
      (( "\C-x4w" . langtool-check)
       ("\C-x4W" . langtool-check-done)
       ("\C-x4l" . langtool-switch-default-language)
       ("\C-x44" . langtool-show-message-at-point)
       ("\C-x4c" . langtool-correct-buffer)))
#+end_src
* Joining items as strings with and without quoting
#+BEGIN_SRC emacs-lisp
(require 'quoting-tools)
#+END_SRC
* Report Debug MARK                                                :noexport:
Print Debug markers in *messages*
#+BEGIN_SRC emacs-lisp :eval never-export
(message "Debug MARK")
#+END_SRC
* Ensure gnu-tools
#+begin_src emacs-lisp
(require 'gnu-tools)
#+end_src
* Magit
#+BEGIN_SRC emacs-lisp
	  (use-package magit
	    :defer 2
	    :ensure t
	    :pin melpa
	    :config
	    (if (getenv "MSYSTEM")
	    (setq magit-git-executable "C:/devel/msys64/usr/bin/git.exe"
		  with-editor-emacsclient-executable "C:/devel/msys64/ucrt64/bin/emacsclientw.exe")
	       
	    (setq magit-git-executable "C:/Users/zzzap/AppData/Local/Programs/Git/cmd/git.exe"
		  with-editor-emacsclient-executable "C:/Program Files/Emacs/emacs-28.2/bin/emacsclient.exe")
	    )
	    :bind
	    (("C-x g" . magit-status)
	     ("C-x M-d" . magit-dispatch-popup)))
 #+END_SRC
* Roswell
#+begin_src emacs-lisp
  (if (getenv "MSYSTEM")
    (when (file-exists-p (expand-file-name "~/.roswell/helper.el"))
      (load (expand-file-name "~/.roswell/helper.el"))))
#+end_src
* Modus Theme Configuration
Main Page: [[https://protesilaos.com/emacs/modus-themes]]
#+BEGIN_SRC emacs-lisp
    (use-package modus-themes
      :ensure t
      :config
      (set-face-attribute 'default nil :height 150)
	  ;; Subtle red background, red foreground, invisible border

      (setq modus-themes-region '(bg-only))
      (setq modus-themes-paren-match '(bold intense))
      (setq modus-themes-lang-checkers '(background intense))
      (setq modus-themes-italic-constructs t)
      (setq modus-themes-bold-contructs t)
      ;; Subtle blue background, neutral foreground, intense blue border
      (setq modus-themes-common-palette-overrides
	'((bg-mode-line-active bg-blue-subtle)
	  (fg-mode-line-active fg-main)
	  (border-mode-line-active blue-intense)))
      (setq modus-themes-mode-line '(accented borderless))
      ;;; Org Mode
      (setq modus-themes-heading
	    `((1 . (rainbow bold intense 2.3))
	      (2 . (rainbow bold intense 1.9))
	      (3 . (rainbow bold intense 1.7))
	      (4 . (rainbow bold intense 1.5))
	      (5 . (rainbow bold intense 1.3))
	      (6 . (rainbow bold intense 1.1))
	      (t . (rainbow bold background 1.0))))
      (setq modus-themes-org-agenda
	    '((header-block . (variable-pitch 1.5))
	      (header-date . (grayscale workaholic bold-today 1.2))
	      (event . (accented italic varied))
	      (scheduled . uniform)
	      (habit . traffic-light)))
      (load-theme 'modus-vivendi t))
#+END_SRC

* Rainbow Delimeters
#+BEGIN_SRC emacs-lisp tangle:no
  (use-package rainbow-delimiters)
#+END_SRC
* Powershell
#+begin_src emacs-lisp
  (defun powershell()
    (interactive)
    (let ((explicit-shell-file-name "powershell.exe")
	  (explicit-powershell.exe-args '()))
      (shell (generate-new-buffer-name "*powershell*"))))
#+end_src
* Shells
  [TBD] Decide what is CRUFF here.
  I am attempting to use the friendly-shell infrastructure.

  shell/git-bash works but has prompt problems.
[2023-05-19] Stop tangle of this code.
#+BEGIN_SRC emacs-lisp :tangle no
      (use-package friendly-shell
	:ensure t
	:config   
	  (defun shell/git-bash (&optional path)
	     (interactive)
	     (friendly-shell :path path
			     :interpreter "C:/Program Files/Git/bin/bash.exe"
			     ;;:interpreter-args '("-l")
			     )))


      (use-package friendly-remote-shell
	:ensure t
	:config
	   (defun shell/cisco (&optional path)
	     (interactive)
	     (with-shell-interpreter-connection-local-vars
	       (friendly-remote-shell :path path))))

#+END_SRC
* Add shell extensions
[TBD] If this is org shell extenstion then put this in org-mode section.
#+BEGIN_SRC emacs-lisp
(use-package shx
  :ensure t)
#+END_SRC
* Tramp
Make plink the default tramp method if running on Windows when plink.exe exists.
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :config
      (when (eq  window-system 'w32)
	(setq putty-directory "C:\\Program Files\\PuTTY\\")
	(setq tramp-default-method "plink")
	(when (and (not (string-match putty-directory (getenv "PATH")))
		   (file-directory-p putty-directory))
	  (setenv "PATH" (concat putty-directory ";" (getenv "PATH")))
	  (add-to-list 'exec-path putty-directory))))
#+END_SRC
* Paredit mode
  #+BEGIN_SRC emacs-lisp
    (use-package paredit
      :ensure t
      :hook (lisp-mode . enable-paredit-mode))
    #+END_SRC
* Format of SLIME lisp implementation entries
Create a windows standalone startup for a lisp version.
#+BEGIN_SRC emacs-lisp
  (defmacro add-slime-lisp (slime-tag program program-args environment)
   "The format of a standard slime entry for a lisp implenatation."
  `(list ,slime-tag (cons ,program ,program-args) :env ,environment))

  (defun add-slime-implementation (lisp-invoker)
    "Add an specific lisp invoker to slime list"
    (add-to-list 'slime-lisp-implementations lisp-invoker))
#+END_SRC
* SBCL Invoker for Slime
Here I add the standard startup arguments and enviroment for startup.
#+BEGIN_SRC emacs-lisp
  ;;;; The standard options for SBCL
  (defun invoke-standard-sbcl (slime-tag program environment)
    (add-slime-lisp slime-tag program '("--noinform") environment))
#+END_SRC

* SBCL that are locally compiled from source
#+BEGIN_SRC emacs-lisp
  (defun get-sbcl-versions (base-address)
    "Get all the directories under the base-address/win"
    (remove "." (remove ".." (directory-files (concat base-address "win")))))

  (defun make-sbcl-slime-version (prefix base-address version)
    "Create a SBCL invoker for specific compiled version."
    (invoke-standard-sbcl
      (make-symbol (concat prefix version))
      (concat base-address "win/" version "/bin/sbcl.exe")
      (list (concat "SBCL_HOME=" base-address "win/" version "/lib/sbcl")
	    "CC=c:/devel/msys64/ucrt64/bin/gcc")))

  (defun add-win64-sbcl (base-address)
    "Add a SBCL invoker for all versions under the base-address"
    (let ((versions (get-sbcl-versions base-address)))
      (dolist (version versions)
	  (when (file-exists-p (concat base-address "win/" version "/bin/sbcl.exe"))
	    (add-slime-implementation (make-sbcl-slime-version "sbcl64-" base-address version))))))

  (defun add-sbcl ()
    "Add all the slime invokers for SBCL 64bit compiled versions."
    (add-win64-sbcl "C:/Users/Public/Lispers/sbcl/"))
#+END_SRC
* CCL for SLIME
#+BEGIN_SRC emacs-lisp
  (defun ccl-slime-invoker (slime-tag path)
    "Return a slime invoker; nil if path does not exist"
      (when (file-exists-p path)
	`(,slime-tag (,path))))
  (defun add-ccl ()
    "Check of CCL implentations"
    (let ((ccl32 (ccl-slime-invoker 'ccl-32 "C:/Users/Public/Lispers/ccl/wx86cl.exe"))
	  (ccl64 (ccl-slime-invoker 'ccl-64 "C:/Users/Public/Lispers/ccl/wx86cl64.exe")))
      (when ccl32 (add-slime-implementation ccl32))
      (when ccl64 (add-slime-implementation ccl64))))	  
#+END_SRC
* ABCL
#+BEGIN_SRC emacs-lisp
  (defun invoke-abcl()
    "Return a slime invoker; nil if abcl is not found,"
    (let ((abcl "c:/Program Files/ABCL/abcl-src-1.9.0/dist/abcl.jar"))
      (when (file-exists-p abcl)
	`(abcl  ,(list my-java "-jar" abcl)))))
  (defun add-abcl ()
    "Check of abcl implmentations"
    (let ((abcl (invoke-abcl)))
      (when abcl (add-slime-implementation abcl))))
#+END_SRC
* Add quicklisp-helper
 [UPGRADE HACK]The slime  helper during the  28.1 upgrade and quicklisp-helper needed :tangle no to avoid errors/
 Load the quicklisp-helper file 
 #+INDEX: Common Lisp!quicklisp, slime helper
 #+INDEX: quicklisp!slime helper
 #+INDEX: Slime!quicklisp helper
 #+BEGIN_SRC emacs-lisp
   ;;;; Build the implemenation lisp dynamically.
   ;;;; Remove all nil items from the list.
   ;;;; Load slime helper
   (when (file-exists-p (expand-file-name "~/Documents/Code/quicklisp/slime-helper.el"))
     (load (expand-file-name "~/Documents/Code/quicklisp/slime-helper.el")))
 #+END_SRC
* SLIME Configuation
** REDESIGIN
slime-lisp-implementation should be build by code that add to the list.
The win64-sbcl should be build by a fundtion add-win64-sbcl

Note file-esists-p test if a file exists
     file-directory-p test if a directory exists
 #+INDEX: Slime!LISP Implmentations
 #+BEGIN_SRC emacs-lisp
      ;(add-to-list 'load-path "C:/devel/msys64/usr/local/slime")
   ;;;; Configure slime from the above provisionsing
   ;;;; Remove any empty items
	(require 'slime)
	(require 'slime-autoloads)
	(add-abcl)
	(add-ccl)
        (add-sbcl)
       (setq slime-contribs '(slime-fancy))
       (global-set-key "\C-cs" 'slime-selector)
 #+END_SRC
* Enable lisp-mode .lisp and .asd files
  #+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
	(append '((".*\\.asd\\'" . lisp-mode))
		auto-mode-alist))

  (setq auto-mode-alist
	(append '((".*\\.cl\\'" . lisp-mode))
		auto-mode-alist))
  #+END_SRC

* Common Lisp HyperSpec
  I use my local clone of the Hyperspec
* Hyperspec Root is loaded from Enviroment location
  #+BEGIN_SRC emacs-lisp
    (when (getenv "HyperSpec")
     (setq common-lisp-hyperspec-root (convert-standard-filename (getenv "HyperSpec"))))
  #+END_SRC
* Pascal Setup
  [TBD] I have no pascal compiler configured.
#+BEGIN_SRC emacs-lisp
(add-hook 'pascal-mode-hook
	  (lambda ()
	    (set (make-local-variable 'compile-command)
		 (concat "fpc " (file-name-nondirectory (buffer-file-name)))))
	  t)

(setq auto-mode-alist
      (append '((".*\\.pas\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.pp\\'" . pascal-mode))
	      auto-mode-alist))

(setq auto-mode-alist
      (append '((".*\\.yml\\'" . yaml-mode))
	      auto-mode-alist))
#+END_SRC

* Org Mode
This is a large use-package config statement for org.

** << The Open  ( use-package for org

#+begin_src emacs-lisp
  (use-package org
    :pin elpa
    :config
#+end_src

Note that all items between the open and the close are added to the config.

** Make tab act natively in org source blocks

#+begin_src emacs-lisp
    (setq org-src-tab-acts-natively t)
#+end_src
** Configure org-export
#+begin_src emacs-lisp
  ;; org-export with no TOC, no NUM and no SUB/SUPERSCRIPTS
  (setf org-export-with-toc nil)
  (setf org-export-with-section-numbers nil)
  (setf org-export-with-sub-superscripts nil)
#+end_src
** Org Structure Templates
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("qb" . "quote"))
#+END_SRC
** pdflatex fixed with org export path to perl
#+BEGIN_SRC emacs-lisp
  ;; Where org-export latex can find perl
  (setenv "PATH" (concat (getenv "PATH") ";" (msys-path "usr/bin/")))
#+END_SRC

** org global properties - efforts
#+BEGIN_SRC emacs-lisp
  (setf org-global-properties
      '(("Effort_ALL" . "0:05 0:10 0:15 0:30 1:00 2:00 4:00 6:00 8:00")))
#+END_SRC  
** killing frame for org-protcol capture
#+BEGIN_SRC emacs-lisp
  ;; Kill the frame if one was created for the capture
  (defvar kk/delete-frame-after-capture 0 "Whether to delete the last frame after the current capture")

  (defun kk/delete-frame-if-neccessary (&rest r)
    (cond
     ((= kk/delete-frame-after-capture 0) nil)
     ((> kk/delete-frame-after-capture 1)
      (setq kk/delete-frame-after-capture (- kk/delete-frame-after-capture 1)))
     (t
      (setq kk/delete-frame-after-capture 0)
      (delete-frame))))

  (advice-add 'org-capture-finalize :after 'kk/delete-frame-if-neccessary)
  (advice-add 'org-capture-kill :after 'kk/delete-frame-if-neccessary)
  (advice-add 'org-capture-refile :after 'kk/delete-frame-if-neccessary)
#+END_SRC
** org mode location
#+BEGIN_SRC emacs-lisp
  (setf org-mode-base-dir "~/org/")
#+END_SRC
** gtd location
#+BEGIN_SRC emacs-lisp
  (setf org-gtd-dir (concat org-mode-base-dir "gtd/"))
#+END_SRC
** Org Key Binding
#+BEGIN_SRC emacs-lisp
  ;;;; Org Mode key bindings.
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c b") 'org-switchb)
#+END_SRC

** Configure BABEL languages
 #+BEGIN_SRC emacs-lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((lisp . t)
      (emacs-lisp . t)
      (shell . t)))
 #+END_SRC

** org modules needed
 #+BEGIN_SRC emacs-lisp
   (setq org-modules '(org-habit))
 #+END_SRC
** Header Text Ignore
This code is bugged can't load ox-extras
#+begin_src emacs-lisp :tangle no
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
#+end_src
** org-habit
 [TBD] Find out why I Should not delete this.
 #+BEGIN_SRC emacs-lisp
   (setq org-habit-graph-column 50)
 #+END_SRC
** Org link abbreviations
 #+BEGIN_SRC emacs-lisp
   (setq org-link-abbrev-alist
	 '(("bugzilla" . "http://192.168.1.50/bugzilla/show_bug.cgi?id=")
	   ("bugzilla-comp" . "http://192.168.1.50/bugzilla/describecomponents.cgi?product=")
	   ("code" . "file:///C:/Users/zzzap/Documents/Code/quicklisp/local-projects/%s")
	   ("common-docs" . "file:///C:/Users/zzzap/Documents/Common-Document-Store/%s")))
 #+END_SRC
** Ensure there are standard user ~/org directories
 [TBD] is this how I am configured now?
 How to define the standard HOME org directory.
 Under windows and linux this is ~/org.
 
  #+BEGIN_SRC emacs-lisp
    ;; Create stadard org directories if not already present.
    ;; The standard user directory is ~/org in the HOME directory.
    ;; Override with the var ORG-USER-DIR.
    ;; The org-public-dir is a legacy model for shared tasks across all users.
    ;; The public shared model is to be deprecated in the light of the task-agenda model.
    (default-or-environment org-user-dir (getenv "HOME") "/org" "ORG-USER-DIR")
       (unless (file-directory-p org-user-dir)
	 (make-directory  org-user-dir))
    ;; Define a global org directory
    (default-or-environment org-public-dir "c:/Users/Public/Documents" "/org" "ORG-PUBLIC-DIR")
  #+END_SRC

** Standard Notes file
 [TBD] Is this still relavent?
 This is a standard per User notes file.
 Unser windows and linux this ~/org/notes/notes.org
  #+BEGIN_SRC emacs-lisp
    ;; The Standard org note file is ~/org/notes/notes.
    ;; This can be set by the environment variable ORG-NOTES-FILE
    (default-or-environment org-notes-file org-user-dir "/nodes/notes.org" "ORG-NOTES-FILE")
    (setq org-default-notes-file org-notes-file)
  #+END_SRC

** org TODOs types
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)")))
#+END_SRC
** org TODO colors
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces '(("TODO" . "red")
			         ("NEXT" . "magenta")
				 ("WAITING" ."yellow1")
				 ("CANCELLED"."green")
				 ("DONE" . "green")));
#+END_SRC
** Task agenda context
 - This starts an agenda context
 #+BEGIN_SRC emacs-lisp
   ;;;; Customize the agenda locally
   (local-custom-file "local-custom-agenda.org" "Customize org-agenda")
 #+END_SRC
  - The following may be defined with the above values
    
** Capture Templates
Use [[~/.emacs.d/local-capture.org]] to change the capture template.
 #+BEGIN_SRC emacs-lisp
   ;;;; Customize the agenda locally
   (let ((base (file-name-directory (or load-file-name (buffer-file-name)))))
     (default-or-environment gtd-template-dir base  "" "ORG-TEMPLATE-DIR")
     (local-custom-file "local-capture.org" "Customize org-capture"))
 #+END_SRC
** org mode add :shcmd to sh blocks
  - Using :shcmd "cmdproxy.exe" on Windows uses the emacs version of cmd.
  - Using :shcmd   msys2-base / "bin/bash.exe" will run a shell under msys2 bash.
  - Allow Windows CMD commands to be run from .org files.

  - See https://emacs.stackexchange.com/questions/19037/org-babel-invoking-cmd-exe

  - Example how to use, note "cmdproxy.exe" is a Windows Emacs file.
#+BEGIN_EXAMPLE
\#+BEGIN_SRC sh :shcmd "cmdproxy.exe"
dir
\#+END_SRC
#+END_EXAMPLE
#+BEGIN_SRC emacs-lisp
  (require 'ob-shell)
  (defadvice org-babel-sh-evaluate (around set-shell activate)
    "Add header argument :shcmd that determines the shell to be called."
    (defvar org-babel-sh-command)
    (let* ((org-babel-sh-command (or (cdr (assoc :shcmd params)) org-babel-sh-command)))
      ad-do-it))
#+END_SRC
** org-publish
#+BEGIN_SRC emacs-lisp
  ;;;; org-publishing is a local configuration.
  (local-custom-file "local-publishing.org" "Configuration of org-publishing")
#+END_SRC  

** org-present
#+BEGIN_SRC emacs-lisp
  (use-package org-present
    :ensure t
    :config
      (use-package visual-fill-column
	:ensure t
	:config
	(setq visual-fill-column-width 110
	      visual-fill-column-center-text t)))
#+END_SRC
** Bullets and fonts for org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
			  '(("^ *\\([-]\\) "
			    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (dolist (face '((org-level-1 . 1.2)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Make sure org-indent face is available
  (require 'org-indent)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
#+END_SRC
** >>The close of the (use-package org config

#+begin_src emacs-lisp
  )
#+end_src

This is a single ) to close it.

* PS Print with GHOSTSCRIPT
#+BEGIN_SRC emacs-lisp
   (setq ps-lpr-command "C:/Program Files/gs/gs9.56.1/bin/gswin64c.exe")
   (setq ps-lpr-switches '("-q" "-dNOPAUSE" "-dBATCH" "-sDEVICE=mswinpr2" "-sOutputFile=\"%printer%Canon\ TS6000\ series\""))
   (setq ps-printer-name t)
   (setf ps-font-family 'Courier)
   (setf ps-font-size 10.0)
   (setf ps-line-number t)
   (setf ps-line-number-font-size 10)
#+END_SRC

* Emacs Backup Files
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src

* Eshell
#+begin_src emacs-lisp
  (defun efs/configure-eshell ()
	   ;; Save command history when commands are entered
	   (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

	   ;; Truncate buffer for performance
	   (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

	   (setq eshell-history-size         10000
		 eshell-buffer-maximum-lines 10000
		 eshell-hist-ignoredups t
		 eshell-scroll-to-bottom-on-input t))

  (use-package eshell
	   :hook (eshell-first-time-mode . efs/configure-eshell))

  (use-package eshell-git-prompt
    :ensure t
    :config
      (eshell-git-prompt-use-theme 'powerline))
#+end_src
* Dired
  - dired is configured as a file manager.
** dired hook
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

#+end_src
** Single Dired buffer
#+begin_src emacs-lisp
  (use-package dired-single
    :after
      dired
    :config
      (defun twr/dired-init ()
	(define-key dired-mode-map [remap dired-find-file]
	  'dired-single-buffer)
	(define-key dired-mode-map [remap dired-mouse-find-file-other-window]
	  'dired-single-buffer-mouse)
	(define-key dired-mode-map [remap dired-up-directory]
	  'dired-single-up-directory))
      (twr/dired-init)
      (setq dired-single-use-magic-buffer t)
      ;; F5 is my special key
      (global-set-key [(f5)] 'dired-single-magic-buffer)
      (global-set-key [(control f5)] (function
	(lambda nil (interactive)
	  (dired-single-magic-buffer default-directory))))
      (global-set-key [(shift f5)] (function
	(lambda nil (interactive)
	  (message "Current directory is: %s" default-directory))))
      (global-set-key [(meta f5)] 'dired-single-toggle-buffer-name))
#+end_src
** All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
	:ensure t
	:pin melpa
	:config
	(add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src
** File Sort Order
#+begin_src emacs-lisp
  (defun mydired-sort ()
	  "Sort dired listings with directories first."
	  (save-excursion
	    (let (buffer-read-only)
	      (forward-line 2) ;; beyond dir. header 
	      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
	    (set-buffer-modified-p nil)))

  (defadvice dired-readin
	  (after dired-after-updating-hook first () activate)
	  "Sort dired listings with directories first before adding marks."
	  (mydired-sort))
#+END_SRC
** diredc - NOT TANGLED
#+begin_src emacs-lisp :tangle no
  (use-package diredc)
#+end_src
** Peep Dired - NOT TANGLED
#+begin_src emacs-lisp :tangle no
  (use-package peep-dired
  :config
  ; kill buffers when diabling the mode
  (setq peep-dired-cleanup-on-disable t)
  ; kill buffers when you move to another
  (setq peep-direct-cleanup-on eagerly t)
  ; set mode for peeped buffers
  (setq peep-dired-enable-on-directories t)
  ; file  types not to open
  (setq peep-dired-ignored-extensions '("mkv" "iso" "mp4"))
#+end_src
* Mastodon
#+begin_src emacs-lisp
;;;; mastodon
  (use-package mastodon
    :ensure t)
  (setq mastodon-active-user "tomrake")
  (setq mastodon-instance-url "https://mastodon.social")
#+end_src
* Openwith
NOTE:
On Windows 11, this only opens the file by the Windows extension
So configure it there.
#+begin_src emacs-lisp
  (when (require 'openwith nil 'noerror)

     (setq openwith-associatsions
	 (list (list (openwith-make-extension-regexp '("mpg" "mpeg" "mp3" "mp4"
					      "avi" "wmv" "wav" "mov" "flv"
					      "ogm" "ogg" "mkv")) "vlc.exe")
	       (list (openwith-make-extension-regexp '("JPEG" "JPG"))
		     "c:/Program Files (x86)/JPEGView/JPEGView.exe" '(file))))
;;    (message "OPENWITH CONFIG")
;;    (message openwith-associatsions)
    (openwith-mode 1))
#+end_src
* Recentf 
#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+end_src
* PDF-TOOLS
org-noter hangs on msys2 launch
I am not tangleing this to see of msys2 launch is sucessful.
I remove noter loading, tangle again.
#+begin_src emacs-lisp :tangle no
  (use-package pdf-tools
     :config
     ;(pdf-tools-install))

  (use-package org-pdftools
    :hook (org-mode . org-pdftools-setup-link))
#+end_src
* PPL Time of Day
#+begin_src emacs-lisp
   (setq ppl-holiday-table '(2023					;year
     (1 1)					;new years day
     (2 20)				;presidents day
     (4 7)					; Good Friday
     (5 29)				; Memorial Day
     (7 4)					; Independence Day
     (9 4)					; Labor Day
     (11 24)				; Thanksgiving
     (11 25)				; Next Day
     (12 24)				; Christmas Eve
     (12 25)))                              ; Christmas


    (defun is-holiday (dt table)
      (if table (or (and (= (nth 4 dt) (nth 0 (car table)))
			 (= (nth 3 dt) (nth 1 (car table))))
		    (is-holiday dt (cdr table)))))

    (defun is-ppl-holiday (dt)
      (if (/= (car ppl-holiday-table) (nth 5 dt)) 
	  (error "Update Date table") 
	  (is-holiday dt (cdr ppl-holiday-table))))

    (defun summer (dt)
      (< 5 (nth 4 dt) 12))

  (defun ppl-high-rate (&optional dt)
    (unless dt (setq dt (decode-time)))
	 (cond ((not (< 0 (nth 6 dt) 6))  nil)
	       ((is-ppl-holiday dt)  nil)
	       ((summer dt)  (<= 14 (nth 2 dt) 17))
		(t  ( <= 16 (nth 2 dt) 19))))

#+end_src
* YAML Mode
Add yaml mode
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src
* JSON to Single line
This was found on https://stackoverflow.com/questions/39861580/emacs-program-to-collapse-json-to-single-line and is Justin Schell response.

I am using to add icons to the icons.json file derived from feathericons.
#+begin_src emacs-lisp
(defun json-to-single-line (beg end)
  "Collapse prettified json in region between BEG and END to a single line"
  (interactive "r")
  (if (use-region-p)
      (save-excursion
        (save-restriction
          (narrow-to-region beg end)
          (goto-char (point-min))
          (while (re-search-forward "[[:space:]\n]+" nil t)
            (replace-match " "))))
    (print "This function operates on a region")))
#+end_src
* Auto-tangle configuratioqn files.
This is a tangel test,  does not tangle whtn msys launched. Windows launch neither.


#+begin_src emacs-lisp
  ;; Autommatically tangle our Emacs.org config file when we save it.
  (defun efs/org-babel-tangle-config ()
    (message "Checking after save for tangle.")
    (when (string-equal (buffer-file-name)
			"c:/Users/Public/Lispers/standard-emacs.d/Emacs.org")
      (message "Begin efs/tangle")

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src
* load per user settings
 #+BEGIN_SRC emacs-lisp
;;;; Various user settings is a local configuration.
 (local-custom-file "local-settings.org" "Final user settings")
 #+END_SRC

 
* Sourcing of Scripts
#+BEGIN_SRC emacs-lisp
(require 'filename2clipboard)
#+END_SRC
* Adjust for better GC
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))  
#+end_src
* Report Debug END                                                 :noexport:
Print Debug markers in *messages*
#+BEGIN_SRC emacs-lisp  :eval never-export
(message "Debug END")
#+END_SRC
